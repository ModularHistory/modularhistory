version: "3.8"

services:
  dev:
    depends_on:
      - flower
      - django
      - react
    image: nginx
    ports:
      - "80:80"
    volumes:
      - ./config/nginx/dev:/etc/nginx/conf.d
      - .:/modularhistory

  celery:
    command: sh -c "wait-for-it.sh redis:6379 -- celery -A modularhistory worker --loglevel=info"
    depends_on:
      - django
      - redis
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.50'
          memory: 50M
    env_file: .env
    image: "$BACKEND_IMAGE:$SHA"
    restart: on-failure
    volumes:
      - ./project:/usr/src/app

  celery_beat:
    command: sh -c "wait-for-it.sh redis:6379 -- celery -A modularhistory beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    depends_on:
    depends_on:
      - celery
      - django
    image: "$BACKEND_IMAGE:$SHA"
    restart: on-failure
  
  django:
    command: sh init.sh
    depends_on:
      - postgres
      - redis
      - redisinsight
      - mongo
    env_file: .env
    environment:
      - DJANGO_SETTINGS_MODULE=modularhistory.settings
      - DOCKERIZED=True
      - POSTGRES_HOST=postgres
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8000/healthcheck/ || exit 1"]
      timeout: 7s
      interval: 15s
      retries: 2
      start_period: 10s
    image: "$BACKEND_IMAGE:$SHA"
    networks:
      default:
        ipv4_address: 172.27.0.6
    ports:
      - "8000:8000"
    restart: "unless-stopped"
    user: www-data
    volumes:
      - ./static:/modularhistory/static
      - ./media:/modularhistory/media
      - ./.backups:/modularhistory/.backups
      - /var/lib/lxd/storage-pools/coresvcs/containers/webserver/rootfs/etc/letsencrypt:/etc/letsencrypt

  flower:
    command: flower -A modularhistory --port=5555 --broker=redis://redis:6379/0
    depends_on:
      - celery
      - celery_beat
      - django
      - redis
    env_file: .env
    image: "$BACKEND_IMAGE:$SHA"
    ports:
      - 5555:5555
    restart: "always"

  mongo:
    env_file: .env
    image: mongo
    ports:
      - "27017:27017"
    restart: "always"
    volumes:
      - data:/data
  
  postgres:
    env_file: .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    image: postgres
    ports:
      - "5432:5432"
    restart: "always"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - .backups/init.sql:/docker-entrypoint-initdb.d/init.sql

  react:
    command: npm run start
    depends_on:
      - django
    env_file: .env
    image: "ghcr.io/modularhistory/react:$SHA"
    networks:
      default:
        ipv4_address: 172.27.0.7
    ports:
      - "3000:3000"
  
  redis:
    image: redis
    ports:
      - "6379:6379"
    restart: "always"
    volumes:
      - "data:/data"

  redisinsight:
    depends_on:
      - redis
    env_file: .env
    environment:
      - REDIS_HOSTS=local:redis:6379
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8001/healthcheck/ || exit 1"]
      timeout: 7s
      interval: 15s
      retries: 2
      start_period: 10s
    image: redislabs/redisinsight:latest
    restart: "always"
    ports:
      - "8001:8001"
    volumes:
      - "redisinsight:/db"

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.27.0.0/24

volumes:
  # `data` is used by both redis and mongodb
  data:
  postgres_data:
  redisinsight:
