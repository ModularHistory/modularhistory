##################################
# BASE
##################################

FROM node:lts-buster AS base

ARG ENVIRONMENT
ARG PORT=3000

LABEL org.opencontainers.image.source https://github.com/ModularHistory/modularhistory

# Create required directories.
RUN mkdir -p -- \
  /static \
  /_volumes/static \
  /_volumes/redirects \
  /app/public/media \
  /app/public/static

WORKDIR /app

COPY frontend/package*.json .
COPY frontend/next.config.js .
COPY static /static
COPY .config/scripts/wait-for-it.sh /usr/local/bin/wait-for-it.sh

##################################
# BUILDER
##################################

# https://hub.docker.com/_/node/
FROM base AS builder

ARG PORT

WORKDIR /app

# Install project dependencies.
RUN npm ci || (npm cache clean -f && npm ci)

# Add source code required for compiling JS.
COPY frontend .
COPY .env /.env

# Compile JavaScript.
RUN npm run build

RUN rm /.env

##################################
# RUNNER
##################################

FROM base AS runner

ARG PORT

WORKDIR /app

ENV NODE_ENV production
ENV PORT ${PORT}

# Copy compiled JavaScript and any necessary files not already copied to the base image,
# setting ownership/permissions as necessary.
COPY --from=builder --chown=node:node /app/.next /app/.next
COPY --from=builder /app/public /app/public

# Do a clean installation of only production dependencies.
RUN npm ci --production

# Write an empty dotenv file in the root directory (parent of the app directory)
# to be overwritten by a volume. The Next.js server reads the dotenv file from
# this location upon startup.
RUN touch /.env

# Add local node_modules to PATH.
ENV PATH /app/node_modules/.bin:$PATH

# Add node to the www-data group.
RUN usermod -a -G www-data node

# Expose the port specified by the PORT build arg (default: 3000).
EXPOSE ${PORT}

HEALTHCHECK --interval=30s --timeout=7s --start-period=60s --retries=3 \
  CMD ["sh", "-c", "curl --fail http://localhost:${PORT}/ || exit 1"]

# Switch to non-root user.
USER node

CMD npm run start
