# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions

name: integration
on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
    paths-ignore:
    - .gitignore
    - .github/**
    - '!.github/integration.yml'
    - .idea/**
    - .vscode/**
    - '**.md'
    - '**.rst'
    - config/hooks/**
  # schedule:
  # - cron: 0 9 * * *
  workflow_dispatch:
    inputs:
      jobs:
        description: Comma-separated list of names of jobs to trigger
        required: false
        default: setup-script,build,pytest,e2e,test-deploy
env:
  ADMINS: ${{ secrets.ADMINS }}
  ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
  ALPHA_VANTAGE_ACCESS_KEY: ${{ secrets.ALPHA_VANTAGE_ACCESS_KEY }}
  BRAINTREE_MERCHANT_ID: ${{ secrets.BRAINTREE_MERCHANT_ID }}
  BRAINTREE_PUBLIC_KEY: ${{ secrets.BRAINTREE_PUBLIC_KEY }}
  BRAINTREE_PRIVATE_KEY: ${{ secrets.BRAINTREE_PRIVATE_KEY }}
  CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
  CLOUDFLARE_PASSWORD: ${{ secrets.CLOUDFLARE_PASSWORD }}
  CONTENT_MANAGER_EMAIL: ${{ secrets.CONTENT_MANAGER_EMAIL }}
  CONTENT_MANAGER_PAT: ${{ secrets.CONTENT_MANAGER_PAT }}
  ELASTIC_PASSWORD: ${{ secrets.ELASTIC_PASSWORD }}
  EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
  EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
  EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
  EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
  FACEBOOK_APP_ID: ${{ secrets.FACEBOOK_APP_ID }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  IMGUR_CLIENT_ID: ${{ secrets.IMGUR_CLIENT_ID }}
  IMGUR_CLIENT_SECRET: ${IMGUR_CLIENT_SECRET}
  POSTGRES_HOST: postgres
  POSTGRES_DB: postgres
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  RCLONE_GDRIVE_SA_CREDENTIALS: ${{ secrets.RCLONE_GDRIVE_SA_CREDENTIALS }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  SENTRY_FRONTEND_DSN: ${{ secrets.SENTRY_FRONTEND_DSN }}
  SHA: ${{ github.sha }}
  SOCIAL_AUTH_DISCORD_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_DISCORD_CLIENT_ID }}
  SOCIAL_AUTH_DISCORD_KEY: ${{ secrets.SOCIAL_AUTH_DISCORD_KEY }}
  SOCIAL_AUTH_DISCORD_SECRET: ${{ secrets.SOCIAL_AUTH_DISCORD_SECRET }}
  SOCIAL_AUTH_FACEBOOK_KEY: ${{ secrets.SOCIAL_AUTH_FACEBOOK_KEY }}
  SOCIAL_AUTH_FACEBOOK_SECRET: ${{ secrets.SOCIAL_AUTH_FACEBOOK_SECRET }}
  SOCIAL_AUTH_GITHUB_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_GITHUB_CLIENT_ID }}
  SOCIAL_AUTH_GITHUB_SECRET: ${{ secrets.SOCIAL_AUTH_GITHUB_SECRET }}
  SOCIAL_AUTH_GOOGLE_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_GOOGLE_CLIENT_ID }}
  SOCIAL_AUTH_GOOGLE_SECRET: ${{ secrets.SOCIAL_AUTH_GOOGLE_SECRET }}
  SOCIAL_AUTH_TWITTER_KEY: ${{ secrets.SOCIAL_AUTH_TWITTER_KEY }}
  SOCIAL_AUTH_TWITTER_SECRET: ${{ secrets.SOCIAL_AUTH_TWITTER_SECRET }}
jobs:
  changed-files:
    name: Get changed files
    runs-on: ubuntu-latest
    if: github.actor != 'depbot'
    outputs:
      added-files: ${{ steps.changed-files.outputs.added_files }}
      deleted-files: ${{ steps.changed-files.outputs.deleted_files }}
      modified-files: ${{ steps.changed-files.outputs.modified_files }}
      all-changed-files: ${{ steps.changed-files.outputs.all_changed_files }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v29.0.3
  generate-dotenv-files:
    name: Generate dotenv files
    strategy:
      matrix:
        environment: [test, prod]
    runs-on: ubuntu-latest
    if: github.actor != 'depbot'
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - if: steps.cache-dotenv.outputs.cache-hit != 'true'
      uses: iacobfred/generate-dotenv@v0.2.4
      with:
        template-paths: '.config/_.env .config/_.env.${{ matrix.environment }}'
        cache: true
  setup-script:
    name: Test setup script
    needs: changed-files
    if: ${{ contains(needs.changed-files.outputs.modified-files, 'setup.sh') }}
    strategy:
      matrix:
        # OS options: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
        # NOTE: Services (running in Docker containers) only work on ubuntu.
        os: [macos-latest, ubuntu-latest]
        python-version: [3.9]
    runs-on: ${{ matrix.os }}
    environment: dev
    env:
      TESTING: true
    steps:
    - name: Check out main branch
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4.2.0
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info[:3]))")
    - name: Specify Docker Compose version
      run: |
        echo ""
        echo "Installed version: $(docker compose version)"
        version=2.2.1
        docker compose version | grep --quiet "$version" || {
          echo "Installing Docker Compose version $version ..."
          mkdir -p ~/.docker/cli-plugins/
          curl -SL "https://github.com/docker/compose/releases/download/v${version}/docker-compose-linux-x86_64" -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
          echo "Installed version: $(docker compose version)"
        }
    - name: Configure Docker Compose
      shell: bash
      run: |
        echo "Configuring Docker Compose..."
        if [[ -f docker-compose.dev.yml ]]; then
          echo "Using docker-compose.dev.yml for default overrides..."
          cp docker-compose.dev.yml docker-compose.override.yml
        fi
        echo "Done."
    - name: Add hosts to /etc/hosts
      shell: bash
      run: |
        hosts=("postgres" "redis" "elasticsearch" "modularhistory.dev.net")
        echo "Updating hosts file..."
        for host in "${hosts[@]}"; do
          sudo echo "127.0.0.1 $host" | sudo tee -a /etc/hosts
        done
        echo "Done."
    - name: Install PyInvoke config
      run: |
        sudo cp .config/invoke.yaml /etc/invoke.yaml
      shell: bash
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1.3
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Cache Python virtual environment
      uses: actions/cache@v3
      id: venv-cache
      with:
        path: .venv
        key: venv-${{ matrix.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Test poetry environment (A)
      id: venv-test
      continue-on-error: true
      if: ${{ steps.venv-cache.outputs.cache-hit == 'true' }}
      run: cd backend && poetry run invoke debug && cd ..
    - name: Install Python dependencies
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: ROOT_DIR=$(pwd) bash .config/scripts/install-deps.sh
    - name: Test poetry environment (B)
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: cd backend && poetry run invoke debug && cd ..
    - name: Create .env file
      run: |
        curl -sSfL https://raw.githubusercontent.com/dotenv-linter/dotenv-linter/master/install.sh | sh -s -- -b /usr/local/bin;
        cd backend && poetry run invoke setup.write-dotenv-file --environment=dev && cd ..
    - name: Run setup script
      run: bash setup.sh
      shell: bash
  build:
    name: Build image
    needs: changed-files
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 3
      matrix:
        image: [django, next]
    environment: test
    steps:
    - name: Check out main branch
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Python 3.9
      uses: actions/setup-python@v4.2.0
      with:
        python-version: 3.9
    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info[:3]))")
    - name: Specify Docker Compose version
      run: |
        echo ""
        echo "Installed version: $(docker compose version)"
        version=2.2.1
        docker compose version | grep --quiet "$version" || {
          echo "Installing Docker Compose version $version ..."
          mkdir -p ~/.docker/cli-plugins/
          curl -SL "https://github.com/docker/compose/releases/download/v${version}/docker-compose-linux-x86_64" -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
          echo "Installed version: $(docker compose version)"
        }
    - name: Configure Docker Compose
      shell: bash
      run: |
        echo "Configuring Docker Compose..."
        if [[ -f docker-compose.test.yml ]]; then
          echo "Using docker-compose.test.yml for default overrides..."
          cp docker-compose.test.yml docker-compose.override.yml
        fi
        echo "Done."
    - name: Add hosts to /etc/hosts
      shell: bash
      run: |
        hosts=("postgres" "redis" "elasticsearch" "modularhistory.dev.net")
        echo "Updating hosts file..."
        for host in "${hosts[@]}"; do
          sudo echo "127.0.0.1 $host" | sudo tee -a /etc/hosts
        done
        echo "Done."
    - name: Install PyInvoke config
      run: |
        sudo cp .config/invoke.yaml /etc/invoke.yaml
      shell: bash
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1.3
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Cache Python virtual environment
      uses: actions/cache@v3
      id: venv-cache
      with:
        path: .venv
        key: venv-ubuntu-latest-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Test poetry environment (A)
      id: venv-test
      continue-on-error: true
      if: ${{ steps.venv-cache.outputs.cache-hit == 'true' }}
      run: cd backend && poetry run invoke debug && cd ..
    - name: Install Python dependencies
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: ROOT_DIR=$(pwd) bash .config/scripts/install-deps.sh
    - name: Test poetry environment (B)
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: cd backend && poetry run invoke debug && cd ..
    - name: Create .env file
      run: |
        curl -sSfL https://raw.githubusercontent.com/dotenv-linter/dotenv-linter/master/install.sh | sh -s -- -b /usr/local/bin;
        cd backend && poetry run invoke setup.write-dotenv-file --environment=test && cd ..
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2.0.0
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build image
      id: build-image
      # https://github.com/docker/build-push-action
      uses: docker/build-push-action@v3
      with:
        builder: ${{ steps.buildx.outputs.name }}
        context: .
        file: ./${{ matrix.image }}/Dockerfile.${{ matrix.image }}
        push: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
        secret-files: ENV_FILE=./.env
        tags: ghcr.io/modularhistory/${{ matrix.image }}:${{ github.sha }}
    - name: Build image without cache
      if: ${{ steps.build-image.outcome == 'failure' }}
      uses: docker/build-push-action@v3
      with:
        builder: ${{ steps.buildx.outputs.name }}
        context: .
        file: ./${{ matrix.image }}/Dockerfile.${{ matrix.image }}
        push: true
        no-cache: true
        secret-files: ENV_FILE=./.env
        tags: ghcr.io/modularhistory/${{ matrix.image }}:${{ github.sha }}
  pytest:
    name: Run backend integration tests
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 3
      matrix:
        python-version: [3.9]
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
        - 5432:5432
        # Set health checks to wait until postgres has started.
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        ports:
        - 6379:6379
        # Set health checks to wait until redis has started.
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
    environment: test
    env:
      TESTING: true
    steps:
    - name: Check out main branch
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4.2.0
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info[:3]))")
    - name: Specify Docker Compose version
      run: |
        echo ""
        echo "Installed version: $(docker compose version)"
        version=2.2.1
        docker compose version | grep --quiet "$version" || {
          echo "Installing Docker Compose version $version ..."
          mkdir -p ~/.docker/cli-plugins/
          curl -SL "https://github.com/docker/compose/releases/download/v${version}/docker-compose-linux-x86_64" -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
          echo "Installed version: $(docker compose version)"
        }
    - name: Configure Docker Compose
      shell: bash
      run: |
        echo "Configuring Docker Compose..."
        if [[ -f docker-compose.test.yml ]]; then
          echo "Using docker-compose.test.yml for default overrides..."
          cp docker-compose.test.yml docker-compose.override.yml
        fi
        echo "Done."
    - name: Add hosts to /etc/hosts
      shell: bash
      run: |
        hosts=("postgres" "redis" "elasticsearch" "modularhistory.dev.net")
        echo "Updating hosts file..."
        for host in "${hosts[@]}"; do
          sudo echo "127.0.0.1 $host" | sudo tee -a /etc/hosts
        done
        echo "Done."
    - name: Install PyInvoke config
      run: |
        sudo cp .config/invoke.yaml /etc/invoke.yaml
      shell: bash
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1.3
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Cache Python virtual environment
      uses: actions/cache@v3
      id: venv-cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Test poetry environment (A)
      id: venv-test
      continue-on-error: true
      if: ${{ steps.venv-cache.outputs.cache-hit == 'true' }}
      run: cd backend && poetry run invoke debug && cd ..
    - name: Install Python dependencies
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: ROOT_DIR=$(pwd) bash .config/scripts/install-deps.sh
    - name: Test poetry environment (B)
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: cd backend && poetry run invoke debug && cd ..
    - name: Create .env file
      run: |
        curl -sSfL https://raw.githubusercontent.com/dotenv-linter/dotenv-linter/master/install.sh | sh -s -- -b /usr/local/bin;
        cd backend && poetry run invoke setup.write-dotenv-file --environment=test && cd ..
    - name: Make sure pytest is working
      run: |
        cd backend
        echo "def test_pytest(): pass" > nothing.py
        poetry run pytest nothing.py
        cd ..
    - name: Run tests
      run: cd backend && poetry run invoke test --no-docker; cd ..
  jest:
    name: Run frontend unit tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install modules
      run: cd frontend && npm install; cd ..
    - name: Run jest
      run: cd frontend && npm run test; cd ..
  e2e:
    name: Run e2e tests
    needs: [build]
    environment: test
    env:
      ENVIRONMENT: test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: [chrome]
        container: [1, 2, 3]
    steps:
    - name: Check out main branch
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Python 3.9
      uses: actions/setup-python@v4.2.0
      with:
        python-version: 3.9
    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info[:3]))")
    - name: Specify Docker Compose version
      run: |
        echo ""
        echo "Installed version: $(docker compose version)"
        version=2.2.1
        docker compose version | grep --quiet "$version" || {
          echo "Installing Docker Compose version $version ..."
          mkdir -p ~/.docker/cli-plugins/
          curl -SL "https://github.com/docker/compose/releases/download/v${version}/docker-compose-linux-x86_64" -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
          echo "Installed version: $(docker compose version)"
        }
    - name: Configure Docker Compose
      shell: bash
      run: |
        echo "Configuring Docker Compose..."
        if [[ -f docker-compose.test.yml ]]; then
          echo "Using docker-compose.test.yml for default overrides..."
          cp docker-compose.test.yml docker-compose.override.yml
        fi
        echo "Done."
    - name: Add hosts to /etc/hosts
      shell: bash
      run: |
        hosts=("postgres" "redis" "elasticsearch" "modularhistory.dev.net")
        echo "Updating hosts file..."
        for host in "${hosts[@]}"; do
          sudo echo "127.0.0.1 $host" | sudo tee -a /etc/hosts
        done
        echo "Done."
    - name: Install PyInvoke config
      run: |
        sudo cp .config/invoke.yaml /etc/invoke.yaml
      shell: bash
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1.3
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Cache Python virtual environment
      uses: actions/cache@v3
      id: venv-cache
      with:
        path: .venv
        key: venv-ubuntu-latest-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Test poetry environment (A)
      id: venv-test
      continue-on-error: true
      if: ${{ steps.venv-cache.outputs.cache-hit == 'true' }}
      run: cd backend && poetry run invoke debug && cd ..
    - name: Install Python dependencies
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: ROOT_DIR=$(pwd) bash .config/scripts/install-deps.sh
    - name: Test poetry environment (B)
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: cd backend && poetry run invoke debug && cd ..
    - name: Create .env file
      run: |
        curl -sSfL https://raw.githubusercontent.com/dotenv-linter/dotenv-linter/master/install.sh | sh -s -- -b /usr/local/bin;
        cd backend && poetry run invoke setup.write-dotenv-file --environment=test && cd ..
    - name: Create writable volume directories
      run: |
        dir_names=( "db/backups" "db/init" "static" "media" "redirects" )
        for dir_name in "${dir_names[@]}"; do
          dir_path="_volumes/${dir_name}"
          mkdir -p "$dir_path"; {
            sudo chown -R www-data:www-data "$dir_path" && 
            sudo chmod a+w -R "$dir_path"
          } || exit 1
        done
    - uses: actions/cache@v3
      id: data-cache
      with:
        path: _volumes/db/init
        key: data
    - name: Fetch data
      if: ${{ steps.data-cache.outputs.cache-hit != 'true' }}
      run: |
        test -w _volumes/db/init || {
          echo "Cannot write in db init directory."; exit 1
        }
        rclone --help &>/dev/null || {
          curl https://rclone.org/install.sh | sudo bash 
        } || exit 1
        poetry run invoke db.seed --remote
    - name: Start up containers
      env:
        GHCR_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        SHA: ${{ github.sha }}
      run: bash .config/scripts/deploy.sh
    - name: Run Cypress
      env:
        CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: >
        docker compose -f docker-compose.yml -f docker-compose.test.yml run cypress
        --browser ${{ matrix.browser }} --group "${{ matrix.browser }}"
        --parallel --ci-build-id $GITHUB_TOKEN --record --key $CYPRESS_RECORD_KEY
  test-deploy:
    name: Test deploy
    needs: [changed-files, build]
    if: ${{ contains(needs.changed-files.outputs.modified-files, 'deploy.sh') || github.event_name == 'workflow_dispatch' && contains(github.event.inputs.jobs, 'deploy') }}
    runs-on: ubuntu-latest
    environment: test
    steps:
    - name: Check out main branch
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Python 3.9
      uses: actions/setup-python@v4.2.0
      with:
        python-version: 3.9
    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info[:3]))")
    - name: Specify Docker Compose version
      run: |
        echo ""
        echo "Installed version: $(docker compose version)"
        version=2.2.1
        docker compose version | grep --quiet "$version" || {
          echo "Installing Docker Compose version $version ..."
          mkdir -p ~/.docker/cli-plugins/
          curl -SL "https://github.com/docker/compose/releases/download/v${version}/docker-compose-linux-x86_64" -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
          echo "Installed version: $(docker compose version)"
        }
    - name: Configure Docker Compose
      shell: bash
      run: |
        echo "Configuring Docker Compose..."
        if [[ -f docker-compose.test.yml ]]; then
          echo "Using docker-compose.test.yml for default overrides..."
          cp docker-compose.test.yml docker-compose.override.yml
        fi
        echo "Done."
    - name: Add hosts to /etc/hosts
      shell: bash
      run: |
        hosts=("postgres" "redis" "elasticsearch" "modularhistory.dev.net")
        echo "Updating hosts file..."
        for host in "${hosts[@]}"; do
          sudo echo "127.0.0.1 $host" | sudo tee -a /etc/hosts
        done
        echo "Done."
    - name: Install PyInvoke config
      run: |
        sudo cp .config/invoke.yaml /etc/invoke.yaml
      shell: bash
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1.3
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Cache Python virtual environment
      uses: actions/cache@v3
      id: venv-cache
      with:
        path: .venv
        key: venv-ubuntu-latest-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Test poetry environment (A)
      id: venv-test
      continue-on-error: true
      if: ${{ steps.venv-cache.outputs.cache-hit == 'true' }}
      run: cd backend && poetry run invoke debug && cd ..
    - name: Install Python dependencies
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: ROOT_DIR=$(pwd) bash .config/scripts/install-deps.sh
    - name: Test poetry environment (B)
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: cd backend && poetry run invoke debug && cd ..
    - name: Create .env file
      run: |
        curl -sSfL https://raw.githubusercontent.com/dotenv-linter/dotenv-linter/master/install.sh | sh -s -- -b /usr/local/bin;
        cd backend && poetry run invoke setup.write-dotenv-file --environment=test && cd ..
    - name: Create writable volume directories
      run: |
        dir_names=( "db/backups" "db/init" "static" "media" "redirects" )
        for dir_name in "${dir_names[@]}"; do
          dir_path="_volumes/${dir_name}"
          mkdir -p "$dir_path"; {
            sudo chown -R www-data:www-data "$dir_path" && 
            sudo chmod a+w -R "$dir_path"
          } || exit 1
        done
    - uses: actions/cache@v3
      id: data-cache
      with:
        path: _volumes/db/init
        key: data
    - name: Fetch data
      if: ${{ steps.data-cache.outputs.cache-hit != 'true' }}
      run: |
        test -w _volumes/db/init || {
          echo "Cannot write in db init directory."; exit 1
        }
        rclone --help &>/dev/null || {
          curl https://rclone.org/install.sh | sudo bash 
        } || exit 1
        poetry run invoke db.seed --remote
    - name: Start up containers
      env:
        GHCR_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
      run: bash .config/scripts/deploy.sh
    - name: Run deploy script
      run: bash .config/scripts/deploy.sh
    - name: Run deploy script x2
      run: bash .config/scripts/deploy.sh
  check-types:
    name: Check types
    needs: changed-files
    if: ${{ contains(needs.changed-files.outputs.modified-files, 'py') }}
    runs-on: ubuntu-latest
    environment: test
    strategy:
      max-parallel: 3
      matrix:
        executable: [mypy, pytype]
        python-version: [3.9]
    continue-on-error: ${{ matrix.executable == 'mypy' }}
    steps:
    - name: Check out main branch
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4.2.0
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info[:3]))")
    - name: Specify Docker Compose version
      run: |
        echo ""
        echo "Installed version: $(docker compose version)"
        version=2.2.1
        docker compose version | grep --quiet "$version" || {
          echo "Installing Docker Compose version $version ..."
          mkdir -p ~/.docker/cli-plugins/
          curl -SL "https://github.com/docker/compose/releases/download/v${version}/docker-compose-linux-x86_64" -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
          echo "Installed version: $(docker compose version)"
        }
    - name: Configure Docker Compose
      shell: bash
      run: |
        echo "Configuring Docker Compose..."
        if [[ -f docker-compose.test.yml ]]; then
          echo "Using docker-compose.test.yml for default overrides..."
          cp docker-compose.test.yml docker-compose.override.yml
        fi
        echo "Done."
    - name: Add hosts to /etc/hosts
      shell: bash
      run: |
        hosts=("postgres" "redis" "elasticsearch" "modularhistory.dev.net")
        echo "Updating hosts file..."
        for host in "${hosts[@]}"; do
          sudo echo "127.0.0.1 $host" | sudo tee -a /etc/hosts
        done
        echo "Done."
    - name: Install PyInvoke config
      run: |
        sudo cp .config/invoke.yaml /etc/invoke.yaml
      shell: bash
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1.3
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Cache Python virtual environment
      uses: actions/cache@v3
      id: venv-cache
      with:
        path: .venv
        key: venv-ubuntu-latest-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Test poetry environment (A)
      id: venv-test
      continue-on-error: true
      if: ${{ steps.venv-cache.outputs.cache-hit == 'true' }}
      run: cd backend && poetry run invoke debug && cd ..
    - name: Install Python dependencies
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: ROOT_DIR=$(pwd) bash .config/scripts/install-deps.sh
    - name: Test poetry environment (B)
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: cd backend && poetry run invoke debug && cd ..
    - name: Create .env file
      run: |
        curl -sSfL https://raw.githubusercontent.com/dotenv-linter/dotenv-linter/master/install.sh | sh -s -- -b /usr/local/bin;
        cd backend && poetry run invoke setup.write-dotenv-file --environment=test && cd ..
    - name: Cache type stubs
      id: cache-stubs
      uses: actions/cache@v3
      with:
        path: .cache/${{ matrix.executable }}
        key: ${{ matrix.python-version }}-${{ matrix.executable }}-types
    - name: Determine args
      id: args
      run: |
        if [ ${{ matrix.executable }} = mypy ]; then args="--config-file=./setup.cfg .";
        elif [ ${{ matrix.executable }} = pytype ]; then args="--config=./setup.cfg"; fi;
        echo "::set-output name=args::$args"
    - name: Run static type checker
      run: poetry run ${{ matrix.executable }} ${{ steps.args.outputs.args }}
  analyze:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    environment: test
    strategy:
      fail-fast: false
      matrix:
        language: [javascript, python]
    continue-on-error: true
    steps:
    - name: Check out main branch
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Python 3.9
      uses: actions/setup-python@v4.2.0
      with:
        python-version: 3.9
    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info[:3]))")
    - name: Specify Docker Compose version
      run: |
        echo ""
        echo "Installed version: $(docker compose version)"
        version=2.2.1
        docker compose version | grep --quiet "$version" || {
          echo "Installing Docker Compose version $version ..."
          mkdir -p ~/.docker/cli-plugins/
          curl -SL "https://github.com/docker/compose/releases/download/v${version}/docker-compose-linux-x86_64" -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
          echo "Installed version: $(docker compose version)"
        }
    - name: Configure Docker Compose
      shell: bash
      run: |
        echo "Configuring Docker Compose..."
        if [[ -f docker-compose.test.yml ]]; then
          echo "Using docker-compose.test.yml for default overrides..."
          cp docker-compose.test.yml docker-compose.override.yml
        fi
        echo "Done."
    - name: Add hosts to /etc/hosts
      shell: bash
      run: |
        hosts=("postgres" "redis" "elasticsearch" "modularhistory.dev.net")
        echo "Updating hosts file..."
        for host in "${hosts[@]}"; do
          sudo echo "127.0.0.1 $host" | sudo tee -a /etc/hosts
        done
        echo "Done."
    - name: Install PyInvoke config
      run: |
        sudo cp .config/invoke.yaml /etc/invoke.yaml
      shell: bash
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1.3
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Cache Python virtual environment
      uses: actions/cache@v3
      id: venv-cache
      with:
        path: .venv
        key: venv-ubuntu-latest-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Test poetry environment (A)
      id: venv-test
      continue-on-error: true
      if: ${{ steps.venv-cache.outputs.cache-hit == 'true' }}
      run: cd backend && poetry run invoke debug && cd ..
    - name: Install Python dependencies
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: ROOT_DIR=$(pwd) bash .config/scripts/install-deps.sh
    - name: Test poetry environment (B)
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: cd backend && poetry run invoke debug && cd ..
    - name: Create .env file
      run: |
        curl -sSfL https://raw.githubusercontent.com/dotenv-linter/dotenv-linter/master/install.sh | sh -s -- -b /usr/local/bin;
        cd backend && poetry run invoke setup.write-dotenv-file --environment=test && cd ..
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        setup-python-dependencies: false
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
