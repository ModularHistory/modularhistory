# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions

# !! WARNING !!
# Do not modify this file directly!
# !! WARNING !!
#
# It is generated from: ../workflows-src/integration.yml
# using the script from https://github.com/mithro/actions-includes@main

name: integration
on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
    paths-ignore:
    - .gitignore
    - .github/**
    - '!.github/integration.yml'
    - .idea/**
    - .vscode/**
    - '**.md'
    - '**.rst'
    - config/hooks/**
  schedule:
  - cron: 0 9 * * *
env:
  ADMINS: ${{ secrets.ADMINS }}
  ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
  ALPHA_VANTAGE_ACCESS_KEY: ${{ secrets.ALPHA_VANTAGE_ACCESS_KEY }}
  BRAINTREE_MERCHANT_ID: ${{ secrets.BRAINTREE_MERCHANT_ID }}
  BRAINTREE_PUBLIC_KEY: ${{ secrets.BRAINTREE_PUBLIC_KEY }}
  BRAINTREE_PRIVATE_KEY: ${{ secrets.BRAINTREE_PRIVATE_KEY }}
  CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
  CLOUDFLARE_PASSWORD: ${{ secrets.CLOUDFLARE_PASSWORD }}
  CONTENT_MANAGER_EMAIL: ${{ secrets.CONTENT_MANAGER_EMAIL }}
  CONTENT_MANAGER_PAT: ${{ secrets.CONTENT_MANAGER_PAT }}
  CR_PAT: ${{ secrets.CR_PAT }}
  EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
  EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
  EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
  EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  IMGUR_CLIENT_ID: ${{ secrets.IMGUR_CLIENT_ID }}
  IMGUR_CLIENT_SECRET: ${IMGUR_CLIENT_SECRET}
  MEGA_USERNAME: ${{ secrets.MEGA_USERNAME }}
  MEGA_PASSWORD: ${{ secrets.MEGA_PASSWORD }}
  POSTGRES_HOST: postgres
  POSTGRES_DB: postgres
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  SENTRY_FRONTEND_DSN: ${{ secrets.SENTRY_FRONTEND_DSN }}
  SHA: ${{ github.sha }}
  SOCIAL_AUTH_DISCORD_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_DISCORD_CLIENT_ID }}
  SOCIAL_AUTH_DISCORD_KEY: ${{ secrets.SOCIAL_AUTH_DISCORD_KEY }}
  SOCIAL_AUTH_DISCORD_SECRET: ${{ secrets.SOCIAL_AUTH_DISCORD_SECRET }}
  SOCIAL_AUTH_FACEBOOK_KEY: ${{ secrets.SOCIAL_AUTH_FACEBOOK_KEY }}
  SOCIAL_AUTH_FACEBOOK_SECRET: ${{ secrets.SOCIAL_AUTH_FACEBOOK_SECRET }}
  SOCIAL_AUTH_GITHUB_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_GITHUB_CLIENT_ID }}
  SOCIAL_AUTH_GITHUB_SECRET: ${{ secrets.SOCIAL_AUTH_GITHUB_SECRET }}
  SOCIAL_AUTH_GOOGLE_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_GOOGLE_CLIENT_ID }}
  SOCIAL_AUTH_GOOGLE_SECRET: ${{ secrets.SOCIAL_AUTH_GOOGLE_SECRET }}
  SOCIAL_AUTH_TWITTER_KEY: ${{ secrets.SOCIAL_AUTH_TWITTER_KEY }}
  SOCIAL_AUTH_TWITTER_SECRET: ${{ secrets.SOCIAL_AUTH_TWITTER_SECRET }}
  X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
jobs:
  test-setup:
    name: Test setup script
    strategy:
      max-parallel: 3
      matrix:
        # OS options: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
        # NOTE: Services (running in Docker containers) only work on ubuntu.
        os: [macos-latest, ubuntu-latest]
        python-version: [3.9]
    runs-on: ${{ matrix.os }}
    environment: dev
    env:
      TESTING: true
    steps:
    - name: ‚è∞ üõÇ üìï - Checking workflow expansion is up to date
      uses: mithro/actions-includes@main
      if: runner.os == 'Linux'
      continue-on-error: false
      with:
        workflow: .github/workflows/integration.yml
    - name: Check out main branch
      uses: actions/checkout@v2.3.4
      with:
        fetch-depth: 1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2.2.2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info[:3]))")
    - name: Add hosts to /etc/hosts
      run: |
        sudo echo "127.0.0.1 postgres" | sudo tee -a /etc/hosts
        sudo echo "127.0.0.1 redis" | sudo tee -a /etc/hosts
      shell: bash
    - name: Install PyInvoke config
      run: |
        sudo cp config/invoke.yaml /etc/invoke.yaml
      shell: bash
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1.1.8
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Cache Python virtual environment
      uses: actions/cache@v2
      id: venv-cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Test poetry environment (A)
      id: venv-test
      continue-on-error: true
      if: ${{ steps.venv-cache.outputs.cache-hit == 'true' }}
      run: poetry run invoke debug
    - name: Install Python dependencies
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: |
        poetry --version
        echo "${{ runner.os }}" | grep -i --quiet "macos" && brew install graphviz || sudo apt-get install -y graphviz graphviz-dev
        poetry install --no-root
    - name: Test poetry environment (B)
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: poetry run invoke debug
    - name: Cache node modules
      uses: actions/cache@v2.1.5
      id: node-modules-cache
      with:
        path: frontend/node_modules
        key: node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
    - name: Install JavaScript dependencies
      if: ${{ steps.node-modules-cache.outputs.cache-hit != 'true' }}
      run: |
        cd frontend
        npm ci
        cd ..
    - name: Create .env file
      run: echo "" | grep -i --quiet "dev" && poetry run invoke setup.write-env-file --dev || poetry run invoke setup.write-env-file
    - name: Run setup script
      run: bash setup.sh
      shell: bash
  build-django:
    name: Build Django image
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 3
      matrix:
        python-version: [3.9]
    environment: integration
    steps:
    - name: ‚è∞ üõÇ üìï - Checking workflow expansion is up to date
      uses: mithro/actions-includes@main
      if: runner.os == 'Linux'
      continue-on-error: false
      with:
        workflow: .github/workflows/integration.yml
    - name: Check out main branch
      uses: actions/checkout@v2.3.4
      with:
        fetch-depth: 1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2.2.2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info[:3]))")
    - name: Add hosts to /etc/hosts
      run: |
        sudo echo "127.0.0.1 postgres" | sudo tee -a /etc/hosts
        sudo echo "127.0.0.1 redis" | sudo tee -a /etc/hosts
      shell: bash
    - name: Install PyInvoke config
      run: |
        sudo cp config/invoke.yaml /etc/invoke.yaml
      shell: bash
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1.1.8
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Cache Python virtual environment
      uses: actions/cache@v2
      id: venv-cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Test poetry environment (A)
      id: venv-test
      continue-on-error: true
      if: ${{ steps.venv-cache.outputs.cache-hit == 'true' }}
      run: poetry run invoke debug
    - name: Install Python dependencies
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: |
        poetry --version
        echo "${{ runner.os }}" | grep -i --quiet "macos" && brew install graphviz || sudo apt-get install -y graphviz graphviz-dev
        poetry install --no-root
    - name: Test poetry environment (B)
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: poetry run invoke debug
    - name: Cache node modules
      uses: actions/cache@v2.1.5
      id: node-modules-cache
      with:
        path: frontend/node_modules
        key: node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
    - name: Install JavaScript dependencies
      if: ${{ steps.node-modules-cache.outputs.cache-hit != 'true' }}
      run: |
        cd frontend
        npm ci
        cd ..
    - name: Create .env file
      run: echo "" | grep -i --quiet "dev" && poetry run invoke setup.write-env-file --dev || poetry run invoke setup.write-env-file
    - name: Inject environment vars
      run: poetry run invoke setup.write-env-file
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1.10.0
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT }}
    - name: Build image
      id: build
      continue-on-error: true
      uses: docker/build-push-action@v2
      with:
        build-args: |
          ENVIRONMENT=prod
        builder: ${{ steps.buildx.outputs.name }}
        cache-from: type=gha,scope=django
        cache-to: type=gha,mode=max,scope=django
        context: .
        file: ./build/Dockerfile.django
        load: false
        push: true
        secret-files: ENV_FILE=./.env
        tags: ghcr.io/modularhistory/django:${{ github.sha }}
    - name: Build image (retry without cache)
      if: ${{ steps.build.outcome == 'failure' }}
      uses: docker/build-push-action@v2
      with:
        build-args: |
          ENVIRONMENT=prod
        context: .
        file: ./build/Dockerfile.django
        load: false
        push: true
        no-cache: true
        secret-files: ENV_FILE=./.env
        tags: ghcr.io/modularhistory/django:${{ github.sha }}
    - name: Run Snyk to check image for vulnerabilities
      continue-on-error: true
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ghcr.io/modularhistory/django:${{ github.sha }}
        args: --file=Dockerfile.django
  build-react:
    name: Build React image
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 3
      matrix:
        python-version: [3.9]
    environment: integration
    steps:
    - name: ‚è∞ üõÇ üìï - Checking workflow expansion is up to date
      uses: mithro/actions-includes@main
      if: runner.os == 'Linux'
      continue-on-error: false
      with:
        workflow: .github/workflows/integration.yml
    - name: Check out main branch
      uses: actions/checkout@v2.3.4
      with:
        fetch-depth: 1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2.2.2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info[:3]))")
    - name: Add hosts to /etc/hosts
      run: |
        sudo echo "127.0.0.1 postgres" | sudo tee -a /etc/hosts
        sudo echo "127.0.0.1 redis" | sudo tee -a /etc/hosts
      shell: bash
    - name: Install PyInvoke config
      run: |
        sudo cp config/invoke.yaml /etc/invoke.yaml
      shell: bash
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1.1.8
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Cache Python virtual environment
      uses: actions/cache@v2
      id: venv-cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Test poetry environment (A)
      id: venv-test
      continue-on-error: true
      if: ${{ steps.venv-cache.outputs.cache-hit == 'true' }}
      run: poetry run invoke debug
    - name: Install Python dependencies
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: |
        poetry --version
        echo "${{ runner.os }}" | grep -i --quiet "macos" && brew install graphviz || sudo apt-get install -y graphviz graphviz-dev
        poetry install --no-root
    - name: Test poetry environment (B)
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: poetry run invoke debug
    - name: Cache node modules
      uses: actions/cache@v2.1.5
      id: node-modules-cache
      with:
        path: frontend/node_modules
        key: node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
    - name: Install JavaScript dependencies
      if: ${{ steps.node-modules-cache.outputs.cache-hit != 'true' }}
      run: |
        cd frontend
        npm ci
        cd ..
    - name: Create .env file
      run: echo "" | grep -i --quiet "dev" && poetry run invoke setup.write-env-file --dev || poetry run invoke setup.write-env-file
    - name: Inject environment vars
      run: poetry run invoke setup.write-env-file
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1.10.0
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT }}
    - name: Build image
      id: build
      continue-on-error: true
      uses: docker/build-push-action@v2
      with:
        build-args: |
          ENVIRONMENT=prod
        builder: ${{ steps.buildx.outputs.name }}
        cache-from: type=gha,scope=react
        cache-to: type=gha,mode=max,scope=react
        context: .
        file: ./build/Dockerfile.react
        load: false
        push: true
        secret-files: ENV_FILE=./.env
        tags: ghcr.io/modularhistory/react:${{ github.sha }}
    - name: Build image (retry without cache)
      if: ${{ steps.build.outcome == 'failure' }}
      uses: docker/build-push-action@v2
      with:
        build-args: |
          ENVIRONMENT=prod
        context: .
        file: ./build/Dockerfile.react
        load: false
        push: true
        no-cache: true
        secret-files: ENV_FILE=./.env
        tags: ghcr.io/modularhistory/react:${{ github.sha }}
    - name: Run Snyk to check image for vulnerabilities
      continue-on-error: true
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ghcr.io/modularhistory/react:${{ github.sha }}
        args: --file=Dockerfile.react
  build-webserver:
    name: Build webserver image
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 3
      matrix:
        python-version: [3.9]
    environment: integration
    steps:
    - name: ‚è∞ üõÇ üìï - Checking workflow expansion is up to date
      uses: mithro/actions-includes@main
      if: runner.os == 'Linux'
      continue-on-error: false
      with:
        workflow: .github/workflows/integration.yml
    - name: Check out main branch
      uses: actions/checkout@v2.3.4
      with:
        fetch-depth: 1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2.2.2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info[:3]))")
    - name: Add hosts to /etc/hosts
      run: |
        sudo echo "127.0.0.1 postgres" | sudo tee -a /etc/hosts
        sudo echo "127.0.0.1 redis" | sudo tee -a /etc/hosts
      shell: bash
    - name: Install PyInvoke config
      run: |
        sudo cp config/invoke.yaml /etc/invoke.yaml
      shell: bash
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1.1.8
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Cache Python virtual environment
      uses: actions/cache@v2
      id: venv-cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Test poetry environment (A)
      id: venv-test
      continue-on-error: true
      if: ${{ steps.venv-cache.outputs.cache-hit == 'true' }}
      run: poetry run invoke debug
    - name: Install Python dependencies
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: |
        poetry --version
        echo "${{ runner.os }}" | grep -i --quiet "macos" && brew install graphviz || sudo apt-get install -y graphviz graphviz-dev
        poetry install --no-root
    - name: Test poetry environment (B)
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: poetry run invoke debug
    - name: Cache node modules
      uses: actions/cache@v2.1.5
      id: node-modules-cache
      with:
        path: frontend/node_modules
        key: node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
    - name: Install JavaScript dependencies
      if: ${{ steps.node-modules-cache.outputs.cache-hit != 'true' }}
      run: |
        cd frontend
        npm ci
        cd ..
    - name: Create .env file
      run: echo "" | grep -i --quiet "dev" && poetry run invoke setup.write-env-file --dev || poetry run invoke setup.write-env-file
    - name: Inject environment vars
      run: poetry run invoke setup.write-env-file
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1.10.0
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT }}
    - name: Build image
      id: build
      continue-on-error: true
      uses: docker/build-push-action@v2
      with:
        build-args: |
          ENVIRONMENT=prod
        builder: ${{ steps.buildx.outputs.name }}
        cache-from: type=gha,scope=webserver
        cache-to: type=gha,mode=max,scope=webserver
        context: .
        file: ./build/Dockerfile.webserver
        load: true
        push: false
        secret-files: ENV_FILE=./.env
        tags: ghcr.io/modularhistory/webserver:${{ github.sha }}
    - name: Build image (retry without cache)
      if: ${{ steps.build.outcome == 'failure' }}
      uses: docker/build-push-action@v2
      with:
        build-args: |
          ENVIRONMENT=prod
        context: .
        file: ./build/Dockerfile.webserver
        load: true
        push: false
        no-cache: true
        secret-files: ENV_FILE=./.env
        tags: ghcr.io/modularhistory/webserver:${{ github.sha }}
    - name: Run Snyk to check image for vulnerabilities
      continue-on-error: true
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ghcr.io/modularhistory/webserver:${{ github.sha }}
        args: --file=Dockerfile.webserver
  test-backend:
    name: Test backend
    strategy:
      max-parallel: 3
      matrix:
        # Note: Services (running in Docker containers) only work on ubuntu.
        os: [ubuntu-latest]
        python-version: [3.9]
    runs-on: ${{ matrix.os }}
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
        - 5432:5432
        # Set health checks to wait until postgres has started.
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        ports:
        - 6379:6379
        # Set health checks to wait until redis has started.
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
    environment: integration
    env:
      TESTING: true
    steps:
    - name: ‚è∞ üõÇ üìï - Checking workflow expansion is up to date
      uses: mithro/actions-includes@main
      if: runner.os == 'Linux'
      continue-on-error: false
      with:
        workflow: .github/workflows/integration.yml
    - name: Check out main branch
      uses: actions/checkout@v2.3.4
      with:
        fetch-depth: 1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2.2.2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info[:3]))")
    - name: Add hosts to /etc/hosts
      run: |
        sudo echo "127.0.0.1 postgres" | sudo tee -a /etc/hosts
        sudo echo "127.0.0.1 redis" | sudo tee -a /etc/hosts
      shell: bash
    - name: Install PyInvoke config
      run: |
        sudo cp config/invoke.yaml /etc/invoke.yaml
      shell: bash
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1.1.8
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Cache Python virtual environment
      uses: actions/cache@v2
      id: venv-cache
      with:
        path: .venv
        key: venv-${{ matrix.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Test poetry environment (A)
      id: venv-test
      continue-on-error: true
      if: ${{ steps.venv-cache.outputs.cache-hit == 'true' }}
      run: poetry run invoke debug
    - name: Install Python dependencies
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: |
        poetry --version
        echo "${{ matrix.os }}" | grep -i --quiet "macos" && brew install graphviz || sudo apt-get install -y graphviz graphviz-dev
        poetry install --no-root
    - name: Test poetry environment (B)
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: poetry run invoke debug
    - name: Cache node modules
      uses: actions/cache@v2.1.5
      id: node-modules-cache
      with:
        path: frontend/node_modules
        key: node-modules-${{ matrix.os }}-${{ hashFiles('**/package-lock.json') }}
    - name: Install JavaScript dependencies
      if: ${{ steps.node-modules-cache.outputs.cache-hit != 'true' }}
      run: |
        cd frontend
        npm ci
        cd ..
    - name: Create .env file
      run: echo "" | grep -i --quiet "dev" && poetry run invoke setup.write-env-file --dev || poetry run invoke setup.write-env-file
    - name: Make sure pytest is working
      run: |
        echo "def test_pytest(): pass" > nothing.py
        poetry run pytest nothing.py
    - name: Run tests
      run: poetry run invoke test --no-docker
  test-frontend:
    name: Test
    continue-on-error: true
    needs: [build-react, build-django]
    container: cypress/browsers:node12.18.3-chrome87-ff82
    strategy:
      fail-fast: false
      matrix:
        # Note: Services (running in Docker containers) only work on ubuntu.
        os: [ubuntu-latest]
        browser: [chrome, firefox]
      max-parallel: 3
    runs-on: ${{ matrix.os }}
    steps:
    - name: ‚è∞ üõÇ üìï - Checking workflow expansion is up to date
      uses: mithro/actions-includes@main
      if: runner.os == 'Linux'
      continue-on-error: false
      with:
        workflow: .github/workflows/integration.yml
    - uses: actions/checkout@v2
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1.10.0
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT }}
    - run: |
        docker-compose pull
        docker-compose up -d django react webserver
    - name: Check frontend service
      run: curl --fail http://modularhistory.dev.net || exit 1
    - name: Run Cypress
      uses: cypress-io/github-action@v2
      with:
        config: baseUrl=http://modularhistory.dev.net
        browser: ${{ matrix.browser }}
  check-types:
    name: Check types
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 3
      matrix:
        python-version: [3.9]
    environment: integration
    steps:
    - name: ‚è∞ üõÇ üìï - Checking workflow expansion is up to date
      uses: mithro/actions-includes@main
      if: runner.os == 'Linux'
      continue-on-error: false
      with:
        workflow: .github/workflows/integration.yml
    - name: Check out main branch
      uses: actions/checkout@v2.3.4
      with:
        fetch-depth: 1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2.2.2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info[:3]))")
    - name: Add hosts to /etc/hosts
      run: |
        sudo echo "127.0.0.1 postgres" | sudo tee -a /etc/hosts
        sudo echo "127.0.0.1 redis" | sudo tee -a /etc/hosts
      shell: bash
    - name: Install PyInvoke config
      run: |
        sudo cp config/invoke.yaml /etc/invoke.yaml
      shell: bash
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1.1.8
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Cache Python virtual environment
      uses: actions/cache@v2
      id: venv-cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Test poetry environment (A)
      id: venv-test
      continue-on-error: true
      if: ${{ steps.venv-cache.outputs.cache-hit == 'true' }}
      run: poetry run invoke debug
    - name: Install Python dependencies
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: |
        poetry --version
        echo "${{ runner.os }}" | grep -i --quiet "macos" && brew install graphviz || sudo apt-get install -y graphviz graphviz-dev
        poetry install --no-root
    - name: Test poetry environment (B)
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: poetry run invoke debug
    - name: Cache node modules
      uses: actions/cache@v2.1.5
      id: node-modules-cache
      with:
        path: frontend/node_modules
        key: node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
    - name: Install JavaScript dependencies
      if: ${{ steps.node-modules-cache.outputs.cache-hit != 'true' }}
      run: |
        cd frontend
        npm ci
        cd ..
    - name: Create .env file
      run: echo "" | grep -i --quiet "dev" && poetry run invoke setup.write-env-file --dev || poetry run invoke setup.write-env-file
    - name: Cache type stubs
      id: cache-stubs
      uses: actions/cache@v2
      with:
        path: .pytype
        key: ${{ matrix.python-version }}-type-stubs
    - name: Run static type checker
      run: poetry run pytype --config=./setup.cfg
  analyze:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [javascript, python]
    continue-on-error: true
    steps:
    - name: ‚è∞ üõÇ üìï - Checking workflow expansion is up to date
      uses: mithro/actions-includes@main
      if: runner.os == 'Linux'
      continue-on-error: false
      with:
        workflow: .github/workflows/integration.yml
    - name: Checkout repository
      uses: actions/checkout@v2.3.4
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
    - name: Autobuild
      uses: github/codeql-action/autobuild@v1
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
  OSSAR-Scan:
    name: OSSAR Scan
    runs-on: windows-latest
    continue-on-error: true
    steps:
    - name: ‚è∞ üõÇ üìï - Checking workflow expansion is up to date
      uses: mithro/actions-includes@main
      if: runner.os == 'Linux'
      continue-on-error: false
      with:
        workflow: .github/workflows/integration.yml
    - name: Support longpaths
      run: git config --system core.longpaths true
    - name: Checkout repository
      uses: actions/checkout@v2.3.4
      with:
        # We must fetch at least the immediate parents so that if this is
        # a pull request then we can checkout the head.
        fetch-depth: 2
    - run: git checkout HEAD^2
      if: ${{ github.event_name == 'pull_request' }}
    - name: Run OSSAR
      uses: github/ossar-action@v1
      id: ossar
    - name: Upload OSSAR results
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: ${{ steps.ossar.outputs.sarifFile }}
