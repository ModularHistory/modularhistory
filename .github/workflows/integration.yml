# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions

name: integration

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
    paths-ignore:
      - '.gitignore'
      - '.github/**'
      - '!.github/integration.yml'
      - '.idea/**'
      - '.vscode/**'
      - '**.md'
      - '**.rst'
  schedule:
    - cron: '0 9 * * *'

env:
  ADMINS: ${{ secrets.ADMINS }}
  ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
  ALPHA_VANTAGE_ACCESS_KEY: ${{ secrets.ALPHA_VANTAGE_ACCESS_KEY }}
  CR_PAT: ${{ secrets.CR_PAT }}
  EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
  EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
  EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
  EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  IMGUR_CLIENT_ID: ${{ secrets.IMGUR_CLIENT_ID }}
  IMGUR_CLIENT_SECRET: ${IMGUR_CLIENT_SECRET}
  MEGA_USERNAME: ${{ secrets.MEGA_USERNAME }}
  MEGA_PASSWORD: ${{ secrets.MEGA_PASSWORD }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
  SHA: ${{ github.sha }}
  SOCIAL_AUTH_TWITTER_KEY: ${{ secrets.SOCIAL_AUTH_TWITTER_KEY }}
  SOCIAL_AUTH_TWITTER_SECRET: ${{ secrets.SOCIAL_AUTH_TWITTER_SECRET }}
  SOCIAL_AUTH_FACEBOOK_KEY: ${{ secrets.SOCIAL_AUTH_FACEBOOK_KEY }}
  SOCIAL_AUTH_FACEBOOK_SECRET: ${{ secrets.SOCIAL_AUTH_FACEBOOK_SECRET }}
  SOCIAL_AUTH_GITHUB_KEY: ${{ secrets.SOCIAL_AUTH_GITHUB_KEY }}
  SOCIAL_AUTH_GITHUB_SECRET: ${{ secrets.SOCIAL_AUTH_GITHUB_SECRET }}
  X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 3
      matrix:
        os: [
          #macos-latest,  # TODO
          ubuntu-latest
        ]
        python-version: [ 3.7 ]
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        ports:
          - 6379:6379
        # Set health checks to wait until redis has started
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
    environment: integration
    env:
      POSTGRES_HOST: postgres
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    steps:
    - uses: actions/checkout@v2
    ##### TODO: Move to composite action when possible #####
    ##### https://github.com/actions/runner/issues/646 #####
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Add hosts to /etc/hosts
      run: |
        sudo echo "127.0.0.1 postgres" | sudo tee -a /etc/hosts
        sudo echo "127.0.0.1 redis" | sudo tee -a /etc/hosts
      shell: bash
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1.1.1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Cache Python virtual environment
      uses: actions/cache@v2
      id: cache
      with:
        path: |
          .venv
          **/node_modules
        key: ${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/package-lock.json') }}
    - name: Install dependencies
      run: poetry install
      if: steps.cache.outputs.cache-hit != 'true'
    ########################################################
    ########################################################
    - name: Install Chrome and Firefox
      run: |
        sudo apt install google-chrome-stable
        sudo apt-get install firefox
    - name: Make sure pytest is working
      run: |
        echo "def test_pytest(): pass" > nothing.py
        poetry run pytest nothing.py
    - name: Run tests
      if: ${{ success() }}
      run: poetry run invoke test

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 3
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ 3.7 ]
    environment: integration
    env:
      POSTGRES_HOST: postgres
      POSTGRES_DB: modularhistory
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    steps:
    - name: Check out main branch
      uses: actions/checkout@v2
    ##### TODO: Move to composite action when possible #####
    ##### https://github.com/actions/runner/issues/646 #####
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Add hosts to /etc/hosts
      run: |
        sudo echo "127.0.0.1 postgres" | sudo tee -a /etc/hosts
        sudo echo "127.0.0.1 redis" | sudo tee -a /etc/hosts
      shell: bash
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1.1.1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Cache Python virtual environment
      uses: actions/cache@v2
      id: cache
      with:
        path: |
          .venv
          **/node_modules
        key: ${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/package-lock.json') }}
    - name: Install dependencies
      run: poetry install
      if: steps.cache.outputs.cache-hit != 'true'
    ########################################################
    ########################################################
    - name: Inject environment vars
      run: poetry run invoke write-env-file
    - name: Build Docker image
      run: poetry run invoke build --github-actor=$GITHUB_ACTOR --access-token=$CR_PAT --sha=$SHA
    - name: Run Snyk to check Docker image for vulnerabilities
      # Snyk can be used to break the build when it detects vulnerabilities.
      # In this case, we want to upload the issues to GitHub Code Scanning.
      continue-on-error: true
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ghcr.io/modularhistory/django:${{ github.sha }}
        args: --file=Dockerfile.django
  
  analyze:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'python' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more: https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main
    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    - name: Autobuild
      uses: github/codeql-action/autobuild@v1
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1

  OSSAR-Scan:
    name: OSSAR Scan
    # OSSAR runs on windows-latest.
    # ubuntu-latest and macos-latest support coming soon.
    runs-on: windows-latest
    steps:
    # Checkout your code repository to scan
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        # We must fetch at least the immediate parents so that if this is
        # a pull request then we can checkout the head.
        fetch-depth: 2
    # If this run was triggered by a pull request event, then checkout
    # the head of the pull request instead of the merge commit.
    - run: git checkout HEAD^2
      if: ${{ github.event_name == 'pull_request' }}
    # Run open source static analysis tools
    - name: Run OSSAR
      uses: github/ossar-action@v1
      id: ossar
    # Upload results to the Security tab
    - name: Upload OSSAR results
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: ${{ steps.ossar.outputs.sarifFile }}
