# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions

name: CD

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '.gitignore'
      - '.gcloudignore'
      - '.github/**'
      - '.idea/**'
      - '.vscode/**'
      - '**.txt'
      - '**.md'

jobs:
  deploy:
    runs-on: ubuntu-latest

    strategy:
      max-parallel: 3
      matrix:
        python-version: [3.7]
    
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    
    env:
      ADMINS: ${{ secrets.ADMINS }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      SOCIAL_AUTH_TWITTER_KEY: ${{ secrets.SOCIAL_AUTH_TWITTER_KEY }}
      SOCIAL_AUTH_TWITTER_SECRET: ${{ secrets.SOCIAL_AUTH_TWITTER_SECRET }}
      SOCIAL_AUTH_FACEBOOK_KEY: ${{ secrets.SOCIAL_AUTH_FACEBOOK_KEY }}
      SOCIAL_AUTH_FACEBOOK_SECRET: ${{ secrets.SOCIAL_AUTH_FACEBOOK_SECRET }}
      SOCIAL_AUTH_GITHUB_KEY: ${{ secrets.SOCIAL_AUTH_GITHUB_KEY }}
      SOCIAL_AUTH_GITHUB_SECRET: ${{ secrets.SOCIAL_AUTH_GITHUB_SECRET }}
      EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
      EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
      EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
      ALPHA_VANTAGE_ACCESS_KEY: ${{ secrets.ALPHA_VANTAGE_ACCESS_KEY }}
      X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
      MEGA_USERNAME: ${{ secrets.MEGA_USERNAME }}
      MEGA_PASSWORD: ${{ secrets.MEGA_PASSWORD }}
      GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS_FILE }}
      SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      CR_PAT: ${{ secrets.CR_PAT }}
    
    steps:
    # Check out master
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Fetch entire history so we can analyze commits since last tag
    
    # Set up Python
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    
    # Set up ModularHistory
    - name: Set up ModularHistory
      if: ${{ success() }}
      run: ./setup.sh --noninteractive --skip-dev-dependencies

    # Collect static files
    - name: Collect static files
      if: ${{ success() }}
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
      run: python manage.py collectstatic --noinput
    
    # Bump version and push tag
    - name: Bump version and push tag
      id: version
      if: ${{ success() }}
      uses: mathieudutour/github-tag-action@v4.5  # https://github.com/marketplace/actions/github-tag
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}

    # Inject environment vars
    - name: Inject environment vars
      run: |
        echo "${{ secrets.GCP_CREDENTIALS }}" > ${{ secrets.GCP_CREDENTIALS_FILE }}
        envsubst < gc_env.yaml > gc_env.yaml.tmp && mv gc_env.yaml.tmp gc_env.yaml
        while read assign; do echo "$assign"; done < <(gsed -nr '/env_variables:/,$ s/  ([A-Z_]+): (.*)/\1=\2/ p' gc_env.yaml) > .env
    
    # Build and push the Docker image
    - name: Build and push Docker image
      id: build-image
      run: |
        echo "Logging in to GitHub container registry..."
        echo "$CR_PAT" | docker login ghcr.io -u iacobfred --password-stdin
        echo "Pulling latest image..."
        # docker pull ghcr.io/modularhistory/modularhistory:latest
        echo "Building new image..."
        docker build "$GITHUB_WORKSPACE/" -f "Dockerfile" --tag ghcr.io/modularhistory/modularhistory:${{ github.sha }} 
        # --cache-from ghcr.io/modularhistory/modularhistory:latest
        echo "Pushing new image to the container registry..."
        docker push ghcr.io/modularhistory/modularhistory:${{ github.sha }}
        mkdir -p ~/.ssh
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        ssh-keyscan github.com >> ~/.ssh/known_hosts
        ssh-add - <<< "${{ secrets.DODC_PRIVATE_KEY }}"
        scp -o StrictHostKeyChecking=no -P 2200 -r .env ./docker-compose.yml modularhistory@kfred.dyndns.org:~/modularhistory
        ssh -o StrictHostKeyChecking=no -p 2200 modularhistory@kfred.dyndns.org << 'ENDSSH'
          cd ~/modularhistory
          source .env
          echo "$CR_PAT" | docker login ghcr.io -u iacobfred --password-stdin
          docker pull ghcr.io/modularhistory/modularhistory:${{ github.sha }}
          docker-compose up -d nginx
        ENDSSH
    
    # Setup gcloud environment
    - name: Setup gcloud environment
      if: ${{ success() }}
      uses: google-github-actions/setup-gcloud@master  # https://github.com/google-github-actions/setup-gcloud
      with:
        project_id: modularhistory
        service_account_key: ${{ secrets.GCP_CREDENTIALS }}
        export_default_credentials: true

    # Print gcloud info
    - name: Print gcloud info
      if: ${{ success() }}
      run: gcloud info

    # Deploy to Google Cloud
    - name: Deploy to Google Cloud
      if: ${{ success() }}
      run: gcloud app deploy gc_app.yaml
    
    # Create Sentry release
    - name: Create Sentry release
      if: ${{ success() }}
      uses: getsentry/action-release@v1.0.0
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
      with:
        environment: production
