# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions

name: Delivery

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '.gitignore'
      - '.github/**'
      - '!.github/delivery.yml'
      - '.idea/**'
      - '.vscode/**'
      - '**.txt'
      - '**.md'

env:
  ENVIRONMENT: prod
  IMAGE_NAME: ghcr.io/modularhistory/modularhistory
  SHA: ${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    strategy:
      max-parallel: 3
      matrix:
        python-version: [3.7]
    
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    
    env:
      ADMINS: ${{ secrets.ADMINS }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      POSTGRES_HOST: db
      POSTGRES_DB: modularhistory
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
      SOCIAL_AUTH_TWITTER_KEY: ${{ secrets.SOCIAL_AUTH_TWITTER_KEY }}
      SOCIAL_AUTH_TWITTER_SECRET: ${{ secrets.SOCIAL_AUTH_TWITTER_SECRET }}
      SOCIAL_AUTH_FACEBOOK_KEY: ${{ secrets.SOCIAL_AUTH_FACEBOOK_KEY }}
      SOCIAL_AUTH_FACEBOOK_SECRET: ${{ secrets.SOCIAL_AUTH_FACEBOOK_SECRET }}
      SOCIAL_AUTH_GITHUB_KEY: ${{ secrets.SOCIAL_AUTH_GITHUB_KEY }}
      SOCIAL_AUTH_GITHUB_SECRET: ${{ secrets.SOCIAL_AUTH_GITHUB_SECRET }}
      EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
      EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
      EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
      ALPHA_VANTAGE_ACCESS_KEY: ${{ secrets.ALPHA_VANTAGE_ACCESS_KEY }}
      X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
      MEGA_USERNAME: ${{ secrets.MEGA_USERNAME }}
      MEGA_PASSWORD: ${{ secrets.MEGA_PASSWORD }}
      SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      CR_PAT: ${{ secrets.CR_PAT }}
      SERVER: kfred.dyndns.org
    
    steps:
    # Check out master
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Fetch entire history so we can analyze commits since last tag

    # Inject environment vars
    - name: Inject environment vars
      if: ${{ success() }}
      run: |
        envsubst < config/env.yaml > env.yaml.tmp && mv env.yaml.tmp config/env.yaml
        while read assign; do echo "$assign"; done < <(sed -nr '/env_variables:/,$ s/  ([A-Z_]+): (.*)/\1=\2/ p' config/env.yaml) > .env
    
    # Build and push the Docker image
    - name: Build and push image
      if: ${{ success() }}
      run: |
        echo "" && echo "Logging in to GitHub container registry..."
        echo "$CR_PAT" | docker login ghcr.io -u iacobfred --password-stdin
        echo "" && echo "Pulling $IMAGE_NAME:latest..."; docker pull $IMAGE_NAME:latest
        echo "" && echo "Building $IMAGE_NAME:${{ github.sha }}..."
        docker build . -t $IMAGE_NAME:${{ github.sha }} --cache-from $IMAGE_NAME:latest
        docker tag $IMAGE_NAME:${{ github.sha }} $IMAGE_NAME:latest
        echo "" && echo "Pushing new image ($IMAGE_NAME:${{ github.sha }}) to the registry..."
        docker push $IMAGE_NAME:${{ github.sha }} && docker push $IMAGE_NAME:latest
        echo "" && echo "Proceeding..."

    # Deploy to server
    - name: Deploy image to server
      id: deploy-image
      if: ${{ success() }}
      run: |
        echo "Adding GitHub to known hosts..."
        mkdir -p ~/.ssh
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        ssh-keyscan github.com >> ~/.ssh/known_hosts
        ssh-add - <<< "${{ secrets.DODC_PRIVATE_KEY }}"
        echo "Transferring files to $SERVER..."
        scp -o StrictHostKeyChecking=no -P 2200 -r ./.env ./docker-compose.yml ./config modularhistory@$SERVER:~/
        echo "Starting SSH session with $SERVER..."
        ssh -o StrictHostKeyChecking=no -p 2200 modularhistory@$SERVER << 'ENDSSH'
          echo "Working dir:" && pwd && echo "" && ls
          echo "" && echo "Setting environment variables..."
          set -a; source .env; set +a
          echo "" && echo "Logging in to the container registry..."
          docker login ghcr.io -u iacobfred -p $CR_PAT
          echo "Pulling images to $SERVER..."
          docker-compose pull
          docker image inspect $IMAGE_NAME:${{ github.sha }} >/dev/null 2>&1 && echo "Successfully pulled modularhistory:${{ github.sha }}" || echo "ERROR: Did not retrieve modularhistory:${{ github.sha }}."
          echo "" && echo "Restarting webserver..."
          docker-compose down
          docker-compose up -d modularhistory
          docker system prune -f
        ENDSSH
    
    # Create Sentry release
    - name: Create Sentry release
      if: ${{ success() }}
      uses: getsentry/action-release@v1
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
      with:
        environment: 'prod'
