# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions

# !! WARNING !!
# Do not modify this file directly!
# !! WARNING !!
#
# It is generated from: ../workflows-src/delivery.yml
# using the script from https://github.com/mithro/actions-includes@main

name: delivery
on:
  push:
    branches: [main]
    paths-ignore:
    - .gitignore
    - .github/**
    - '!.github/delivery.yml'
    - .idea/**
    - .vscode/**
    - '**.md'
    - '**.rst'
    - '**.txt'
    - tests.py
    - setup.sh
    - config/hooks/**

env:
  ENVIRONMENT: prod
  SHA: ${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
        - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      ADMINS: ${{ secrets.ADMINS }}
      ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
      ALPHA_VANTAGE_ACCESS_KEY: ${{ secrets.ALPHA_VANTAGE_ACCESS_KEY }}
      CR_PAT: ${{ secrets.CR_PAT }}
      EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
      EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
      EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      IMGUR_CLIENT_ID: ${{ secrets.IMGUR_CLIENT_ID }}
      IMGUR_CLIENT_SECRET: ${{ secrets.IMGUR_CLIENT_SECRET }}
      MEGA_USERNAME: ${{ secrets.MEGA_USERNAME }}
      MEGA_PASSWORD: ${{ secrets.MEGA_PASSWORD }}
      POSTGRES_DB: modularhistory
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      RCLONE_GDRIVE_SA_CREDENTIALS: ${{ secrets.RCLONE_GDRIVE_SA_CREDENTIALS }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_FRONTEND_DSN: ${{ secrets.SENTRY_FRONTEND_DSN }}
      SERVER: kfred.dyndns.org
      SOCIAL_AUTH_DISCORD_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_DISCORD_CLIENT_ID }}
      SOCIAL_AUTH_DISCORD_KEY: ${{ secrets.SOCIAL_AUTH_DISCORD_KEY }}
      SOCIAL_AUTH_DISCORD_SECRET: ${{ secrets.SOCIAL_AUTH_DISCORD_SECRET }}
      SOCIAL_AUTH_FACEBOOK_KEY: ${{ secrets.SOCIAL_AUTH_FACEBOOK_KEY }}
      SOCIAL_AUTH_FACEBOOK_SECRET: ${{ secrets.SOCIAL_AUTH_FACEBOOK_SECRET }}
      SOCIAL_AUTH_GITHUB_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_GITHUB_CLIENT_ID }}
      SOCIAL_AUTH_GITHUB_SECRET: ${{ secrets.SOCIAL_AUTH_GITHUB_SECRET }}
      SOCIAL_AUTH_GOOGLE_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_GOOGLE_CLIENT_ID }}
      SOCIAL_AUTH_GOOGLE_SECRET: ${{ secrets.SOCIAL_AUTH_GOOGLE_SECRET }}
      SOCIAL_AUTH_TWITTER_KEY: ${{ secrets.SOCIAL_AUTH_TWITTER_KEY }}
      SOCIAL_AUTH_TWITTER_SECRET: ${{ secrets.SOCIAL_AUTH_TWITTER_SECRET }}
      SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
    environment: prod
    steps:
    - name: ⏰ 🛂 📕 - Checking workflow expansion is up to date
      uses: mithro/actions-includes@main
      if: runner.os == 'Linux'
      continue-on-error: false
      with:
        workflow: .github/workflows/delivery.yml
    - name: Check out main branch
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Fetch entire history so we can analyze commits since last tag
    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info[:3]))")
    # Modify hosts file.
    - name: Add hosts to /etc/hosts
      run: |
        sudo echo "127.0.0.1 postgres" | sudo tee -a /etc/hosts
        sudo echo "127.0.0.1 redis" | sudo tee -a /etc/hosts
      shell: bash
    # Install and configure Poetry.
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1.1.4
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    # Load cached .venv, if it exists.
    - name: Cache Python virtual environment
      uses: actions/cache@v2
      id: venv-cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
    # Make sure Poetry environment is healthy.
    - name: Test poetry environment
      id: venv-test
      if: ${{ steps.venv-cache.outputs.cache-hit == 'true' }}
      run: poetry run invoke debug
    # Install Python dependencies if necessary.
    - name: Install Python dependencies
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || failure() }}
      run: |
        sudo apt-get install -y graphviz graphviz-dev
        poetry install --no-root
    # Load cached node_modules dir, if it exists.
    - name: Cache node modules
      uses: actions/cache@v2.1.5
      id: node-modules-cache
      with:
        path: frontend/node_modules
        key: node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
    # Install node modules if necessary.
    - name: Install JavaScript dependencies
      if: ${{ steps.node-modules-cache.outputs.cache-hit != 'true' }}
      run: |
        cd frontend
        npm ci
        cd ..
    - name: Inject environment vars
      run: poetry run invoke setup.write-env-file
    - name: Build and push Docker images
      run: poetry run invoke build --github-actor=$GITHUB_ACTOR --access-token=$CR_PAT --sha=$SHA --environment=prod --push
    - name: Deploy images to server
      id: deploy-image
      run: |
        echo "Adding GitHub to known hosts..."
        mkdir -p ~/.ssh
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        ssh-keyscan github.com >> ~/.ssh/known_hosts
        ssh-add - <<< "${{ secrets.DODC_PRIVATE_KEY }}"
        echo "Transferring files to $SERVER..."
        scp -o StrictHostKeyChecking=no -P 2200 -r ./.env ./docker-compose.yml ./core/templates/error.htm ./config/nginx/prod/nginx.conf ./config modularhistory@$SERVER:~/
        echo "Starting SSH session with $SERVER..."
        ssh -o StrictHostKeyChecking=no -p 2200 modularhistory@$SERVER << 'ENDSSH'
          echo "" && echo "Setting environment variables..."
          set -a && source .env && echo "Finished setting environment variables."
          set +a; bash config/deploy.sh
        ENDSSH
    - name: Create Sentry release
      uses: getsentry/action-release@v1.1.5
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
      with:
        environment: prod
