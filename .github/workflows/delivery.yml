# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions

# !! WARNING !!
# Do not modify this file directly!
# !! WARNING !!
#
# It is generated from: ../workflows-src/delivery.yml
# using the script from https://github.com/mithro/actions-includes@main

name: delivery
on:
  push:
    branches: [main]
    paths-ignore:
    - .gitignore
    - .github/**
    - '!.github/delivery.yml'
    - .idea/**
    - .vscode/**
    - '**.md'
    - '**.rst'
    - '**.txt'
    - tests.py
    - setup.sh
    - config/hooks/**

env:
  ADMINS: ${{ secrets.ADMINS }}
  ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
  ALPHA_VANTAGE_ACCESS_KEY: ${{ secrets.ALPHA_VANTAGE_ACCESS_KEY }}
  BRAINTREE_MERCHANT_ID: ${{ secrets.BRAINTREE_MERCHANT_ID }}
  BRAINTREE_PUBLIC_KEY: ${{ secrets.BRAINTREE_PUBLIC_KEY }}
  BRAINTREE_PRIVATE_KEY: ${{ secrets.BRAINTREE_PRIVATE_KEY }}
  CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
  CLOUDFLARE_PASSWORD: ${{ secrets.CLOUDFLARE_PASSWORD }}
  CONTENT_MANAGER_EMAIL: ${{ secrets.CONTENT_MANAGER_EMAIL }}
  CONTENT_MANAGER_PAT: ${{ secrets.CONTENT_MANAGER_PAT }}
  ELASTIC_PASSWORD: ${{ secrets.ELASTIC_PASSWORD }}
  EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
  EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
  EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
  EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
  ENVIRONMENT: prod
  FACEBOOK_APP_ID: ${{ secrets.FACEBOOK_APP_ID }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  IMGUR_CLIENT_ID: ${{ secrets.IMGUR_CLIENT_ID }}
  IMGUR_CLIENT_SECRET: ${{ secrets.IMGUR_CLIENT_SECRET }}
  POSTGRES_DB: modularhistory
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  RCLONE_GDRIVE_SA_CREDENTIALS: ${{ secrets.RCLONE_GDRIVE_SA_CREDENTIALS }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  SENTRY_FRONTEND_DSN: ${{ secrets.SENTRY_FRONTEND_DSN }}
  SERVER: ${{ secrets.SERVER }}
  SHA: ${{ github.sha }}
  SOCIAL_AUTH_DISCORD_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_DISCORD_CLIENT_ID }}
  SOCIAL_AUTH_DISCORD_KEY: ${{ secrets.SOCIAL_AUTH_DISCORD_KEY }}
  SOCIAL_AUTH_DISCORD_SECRET: ${{ secrets.SOCIAL_AUTH_DISCORD_SECRET }}
  SOCIAL_AUTH_FACEBOOK_KEY: ${{ secrets.SOCIAL_AUTH_FACEBOOK_KEY }}
  SOCIAL_AUTH_FACEBOOK_SECRET: ${{ secrets.SOCIAL_AUTH_FACEBOOK_SECRET }}
  SOCIAL_AUTH_GITHUB_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_GITHUB_CLIENT_ID }}
  SOCIAL_AUTH_GITHUB_SECRET: ${{ secrets.SOCIAL_AUTH_GITHUB_SECRET }}
  SOCIAL_AUTH_GOOGLE_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_GOOGLE_CLIENT_ID }}
  SOCIAL_AUTH_GOOGLE_SECRET: ${{ secrets.SOCIAL_AUTH_GOOGLE_SECRET }}
  SOCIAL_AUTH_TWITTER_KEY: ${{ secrets.SOCIAL_AUTH_TWITTER_KEY }}
  SOCIAL_AUTH_TWITTER_SECRET: ${{ secrets.SOCIAL_AUTH_TWITTER_SECRET }}
  SSH_AUTH_SOCK: /tmp/ssh_agent.sock
  X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
jobs:
  push-image:
    environment: prod
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: [django, next]
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
        - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - name: ‚è∞ üõÇ üìï - Checking workflow expansion is up to date
      uses: mithro/actions-includes@main
      if: runner.os == 'Linux'
      continue-on-error: false
      with:
        workflow: .github/workflows/delivery.yml
    - name: Check out main branch
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Python 3.9
      uses: actions/setup-python@v4.2.0
      with:
        python-version: 3.9
    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info[:3]))")
    - name: Specify Docker Compose version
      run: |
        echo ""
        echo "Installed version: $(docker compose version)"
        version=2.2.1
        docker compose version | grep --quiet "$version" || {
          echo "Installing Docker Compose version $version ..."
          mkdir -p ~/.docker/cli-plugins/
          curl -SL "https://github.com/docker/compose/releases/download/v${version}/docker-compose-linux-x86_64" -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
          echo "Installed version: $(docker compose version)"
        }
    - name: Configure Docker Compose
      shell: bash
      run: |
        echo "Configuring Docker Compose..."
        if [[ -f docker-compose.prod.yml ]]; then
          echo "Using docker-compose.prod.yml for default overrides..."
          cp docker-compose.prod.yml docker-compose.override.yml
        fi
        echo "Done."
    - name: Add hosts to /etc/hosts
      shell: bash
      run: |
        hosts=("postgres" "redis" "elasticsearch" "modularhistory.dev.net")
        echo "Updating hosts file..."
        for host in "${hosts[@]}"; do
          sudo echo "127.0.0.1 $host" | sudo tee -a /etc/hosts
        done
        echo "Done."
    - name: Install PyInvoke config
      run: |
        sudo cp .config/invoke.yaml /etc/invoke.yaml
      shell: bash
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1.3
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Cache Python virtual environment
      uses: actions/cache@v3
      id: venv-cache
      with:
        path: .venv
        key: venv-ubuntu-latest-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Test poetry environment (A)
      id: venv-test
      continue-on-error: true
      if: ${{ steps.venv-cache.outputs.cache-hit == 'true' }}
      run: poetry run invoke debug
    - name: Install Python dependencies
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: bash .config/scripts/install-deps.sh
    - name: Test poetry environment (B)
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: poetry run invoke debug
    - name: Create .env file
      run: |
        curl -sSfL https://raw.githubusercontent.com/dotenv-linter/dotenv-linter/master/install.sh | sh -s -- -b /usr/local/bin;
        poetry run invoke setup.write-dotenv-file --environment=prod
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2.0.0
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build image without cache
      uses: docker/build-push-action@v2
      with:
        build-args: |
          ENVIRONMENT=prod
        builder: ${{ steps.buildx.outputs.name }}
        context: .
        file: ./build/Dockerfile.${{ matrix.image }}
        load: false
        push: true
        no-cache: true
        secret-files: ENV_FILE=./.env
        tags: ghcr.io/modularhistory/${{ matrix.image }}:${{ github.sha }},ghcr.io/modularhistory/${{ matrix.image }}:latest
    - name: Run Snyk to check image for vulnerabilities
      continue-on-error: true
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ghcr.io/modularhistory/${{ matrix.image }}:${{ github.sha }}
        args: --file=Dockerfile.${{ matrix.image }}
  deploy:
    needs: [push-image]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
        - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    environment: prod
    steps:
    - name: ‚è∞ üõÇ üìï - Checking workflow expansion is up to date
      uses: mithro/actions-includes@main
      if: runner.os == 'Linux'
      continue-on-error: false
      with:
        workflow: .github/workflows/delivery.yml
    - name: Check out main branch
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Python 3.9
      uses: actions/setup-python@v4.2.0
      with:
        python-version: 3.9
    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info[:3]))")
    - name: Specify Docker Compose version
      run: |
        echo ""
        echo "Installed version: $(docker compose version)"
        version=2.2.1
        docker compose version | grep --quiet "$version" || {
          echo "Installing Docker Compose version $version ..."
          mkdir -p ~/.docker/cli-plugins/
          curl -SL "https://github.com/docker/compose/releases/download/v${version}/docker-compose-linux-x86_64" -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
          echo "Installed version: $(docker compose version)"
        }
    - name: Configure Docker Compose
      shell: bash
      run: |
        echo "Configuring Docker Compose..."
        if [[ -f docker-compose.prod.yml ]]; then
          echo "Using docker-compose.prod.yml for default overrides..."
          cp docker-compose.prod.yml docker-compose.override.yml
        fi
        echo "Done."
    - name: Add hosts to /etc/hosts
      shell: bash
      run: |
        hosts=("postgres" "redis" "elasticsearch" "modularhistory.dev.net")
        echo "Updating hosts file..."
        for host in "${hosts[@]}"; do
          sudo echo "127.0.0.1 $host" | sudo tee -a /etc/hosts
        done
        echo "Done."
    - name: Install PyInvoke config
      run: |
        sudo cp .config/invoke.yaml /etc/invoke.yaml
      shell: bash
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1.3
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Cache Python virtual environment
      uses: actions/cache@v3
      id: venv-cache
      with:
        path: .venv
        key: venv-ubuntu-latest-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Test poetry environment (A)
      id: venv-test
      continue-on-error: true
      if: ${{ steps.venv-cache.outputs.cache-hit == 'true' }}
      run: poetry run invoke debug
    - name: Install Python dependencies
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: bash .config/scripts/install-deps.sh
    - name: Test poetry environment (B)
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: poetry run invoke debug
    - name: Create .env file
      run: |
        curl -sSfL https://raw.githubusercontent.com/dotenv-linter/dotenv-linter/master/install.sh | sh -s -- -b /usr/local/bin;
        poetry run invoke setup.write-dotenv-file --environment=prod
    - name: Deploy images to server
      id: deploy-image
      env:
        DOMAIN: ${{ secrets.DOMAIN }}
        RELOAD_WEBSERVER: ${{ contains(needs.changed-files.outputs.modified-files, 'nginx.conf') }}
        SERVER_HOST: ${{ secrets.DOMAIN }}
        SERVER_TARGET: /var/www/${{ secrets.DOMAIN }}
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        SSH_PORT: ${{ secrets.SSH_PORT }}
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        echo "Adding GitHub to known hosts..."
        mkdir -p ~/.ssh
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        ssh-keyscan github.com >> ~/.ssh/known_hosts
        ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}"
        echo "Transferring files to $SERVER..."
        files_to_transport=("./.env" "./docker-compose.yml" "./docker-compose.prod.yml" "./.config")
        for filepath in "${files_to_transport[@]}"; do
          mkdir -p dist/$(dirname "${filepath}")
          cp "$filepath" "dist/${filepath}"
        done
        rsync -rPv -e "ssh -p ${SSH_PORT:=22} -o 'StrictHostKeyChecking no'" dist/ jacob@${SERVER}:${SERVER_TARGET}
        echo "Starting SSH session with $SERVER..."
        ssh -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} jacob@$SERVER << 'ENDSSH'
          echo "" && echo "Renaming docker-compose.prod.yml to docker-compose.override.yml ..."
          mv docker-compose.prod.yml docker-compose.override.yml
          echo "" && echo "Setting environment variables..."
          set -a && source .env && echo "Finished setting environment variables."
          set +a; bash .config/scripts/deploy.sh
        ENDSSH
    - name: Create Sentry release
      uses: getsentry/action-release@v1.1.6
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
      with:
        environment: prod
