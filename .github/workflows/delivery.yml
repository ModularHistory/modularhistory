# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions

name: delivery
on:
  push:
    branches: [main]
    paths-ignore:
    - .gitignore
    - .github/**
    - '!.github/delivery.yml'
    - .idea/**
    - .vscode/**
    - '**.md'
    - '**.rst'
    - '**.txt'
    - tests.py
    - setup.sh
    - config/hooks/**

env:
  ADMINS: ${{ secrets.ADMINS }}
  ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
  ALPHA_VANTAGE_ACCESS_KEY: ${{ secrets.ALPHA_VANTAGE_ACCESS_KEY }}
  BRAINTREE_MERCHANT_ID: ${{ secrets.BRAINTREE_MERCHANT_ID }}
  BRAINTREE_PUBLIC_KEY: ${{ secrets.BRAINTREE_PUBLIC_KEY }}
  BRAINTREE_PRIVATE_KEY: ${{ secrets.BRAINTREE_PRIVATE_KEY }}
  CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
  CLOUDFLARE_PASSWORD: ${{ secrets.CLOUDFLARE_PASSWORD }}
  CONTENT_MANAGER_EMAIL: ${{ secrets.CONTENT_MANAGER_EMAIL }}
  CONTENT_MANAGER_PAT: ${{ secrets.CONTENT_MANAGER_PAT }}
  DJANGO_PORT: 8002
  ELASTIC_PASSWORD: ${{ secrets.ELASTIC_PASSWORD }}
  EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
  EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
  EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
  EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
  ENVIRONMENT: prod
  FACEBOOK_APP_ID: ${{ secrets.FACEBOOK_APP_ID }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  IMGUR_CLIENT_ID: ${{ secrets.IMGUR_CLIENT_ID }}
  IMGUR_CLIENT_SECRET: ${{ secrets.IMGUR_CLIENT_SECRET }}
  POSTGRES_DB: modularhistory
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  RCLONE_GDRIVE_SA_CREDENTIALS: ${{ secrets.RCLONE_GDRIVE_SA_CREDENTIALS }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  SENTRY_FRONTEND_DSN: ${{ secrets.SENTRY_FRONTEND_DSN }}
  SHA: ${{ github.sha }}
  SOCIAL_AUTH_DISCORD_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_DISCORD_CLIENT_ID }}
  SOCIAL_AUTH_DISCORD_KEY: ${{ secrets.SOCIAL_AUTH_DISCORD_KEY }}
  SOCIAL_AUTH_DISCORD_SECRET: ${{ secrets.SOCIAL_AUTH_DISCORD_SECRET }}
  SOCIAL_AUTH_FACEBOOK_KEY: ${{ secrets.SOCIAL_AUTH_FACEBOOK_KEY }}
  SOCIAL_AUTH_FACEBOOK_SECRET: ${{ secrets.SOCIAL_AUTH_FACEBOOK_SECRET }}
  SOCIAL_AUTH_GITHUB_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_GITHUB_CLIENT_ID }}
  SOCIAL_AUTH_GITHUB_SECRET: ${{ secrets.SOCIAL_AUTH_GITHUB_SECRET }}
  SOCIAL_AUTH_GOOGLE_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_GOOGLE_CLIENT_ID }}
  SOCIAL_AUTH_GOOGLE_SECRET: ${{ secrets.SOCIAL_AUTH_GOOGLE_SECRET }}
  SOCIAL_AUTH_TWITTER_KEY: ${{ secrets.SOCIAL_AUTH_TWITTER_KEY }}
  SOCIAL_AUTH_TWITTER_SECRET: ${{ secrets.SOCIAL_AUTH_TWITTER_SECRET }}
  SSH_AUTH_SOCK: /tmp/ssh_agent.sock
jobs:
  push-image:
    environment: prod
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: [backend, frontend]
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
        - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - name: Check out main branch
      uses: actions/checkout@v3
    - uses: iacobfred/generate-dotenv@v0.0.7
      with:
        template-paths: .config/_.env
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2.0.0
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build image
      id: build-image
      # https://github.com/docker/build-push-action
      uses: docker/build-push-action@v3
      with:
        build-args: |
          ENVIRONMENT=prod
          PORT=8002
        builder: ${{ steps.buildx.outputs.name }}
        context: .
        file: ./${{ matrix.image }}/Dockerfile.${{ matrix.image }}
        push: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
        secret-files: ENV_FILE=./.env
        tags: ghcr.io/modularhistory/${{ matrix.image }}:${{ github.sha }},ghcr.io/modularhistory/${{ matrix.image }}:latest
    - name: Build image without cache
      if: ${{ steps.build-image.outcome == 'failure' }}
      uses: docker/build-push-action@v3
      with:
        build-args: |
          ENVIRONMENT=prod
          PORT=8002
        builder: ${{ steps.buildx.outputs.name }}
        context: .
        file: ./${{ matrix.image }}/Dockerfile.${{ matrix.image }}
        load: false
        push: true
        no-cache: true
        secret-files: ENV_FILE=./.env
        tags: ghcr.io/modularhistory/${{ matrix.image }}:${{ github.sha }},ghcr.io/modularhistory/${{ matrix.image }}:latest
  deploy:
    needs: [push-image]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
        - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    environment: prod
    steps:
    - name: Check out main branch
      uses: actions/checkout@v3
    - uses: iacobfred/generate-dotenv@v0.0.7
      with:
        template-paths: .config/_.env
    - name: Deploy to server
      uses: iacobfred/deploy-docker-ssh@v0.1.6
      with:
        host: ${{ secrets.DOMAIN }}
        user: jacob
        target: /var/www/${{ secrets.DOMAIN }}
        files: .env docker-compose.yml docker-compose.prod.yml .config
        ssh-port: ${{ secrets.SSH_PORT }}
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        command: mv docker-compose.prod.yml docker-compose.override.yml; set -a && source .env; set +a; GHCR_PASSWORD=${{ secrets.GITHUB_TOKEN }} bash .config/scripts/deploy.sh
    - name: Create Sentry release
      uses: getsentry/action-release@v1.2.0
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
      with:
        environment: prod
