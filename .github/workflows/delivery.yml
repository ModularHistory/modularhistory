# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions

# !! WARNING !!
# Do not modify this file directly!
# !! WARNING !!
#
# It is generated from: ../workflows-src/delivery.yml
# using the script from https://github.com/mithro/actions-includes@main

name: delivery
on:
  push:
    branches: [main]
    paths-ignore:
    - .gitignore
    - .github/**
    - '!.github/delivery.yml'
    - .idea/**
    - .vscode/**
    - '**.md'
    - '**.rst'
    - '**.txt'
    - tests.py
    - setup.sh
    - config/hooks/**

env:
  ADMINS: ${{ secrets.ADMINS }}
  ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
  ALPHA_VANTAGE_ACCESS_KEY: ${{ secrets.ALPHA_VANTAGE_ACCESS_KEY }}
  BRAINTREE_MERCHANT_ID: ${{ secrets.BRAINTREE_MERCHANT_ID }}
  BRAINTREE_PUBLIC_KEY: ${{ secrets.BRAINTREE_PUBLIC_KEY }}
  BRAINTREE_PRIVATE_KEY: ${{ secrets.BRAINTREE_PRIVATE_KEY }}
  CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
  CLOUDFLARE_PASSWORD: ${{ secrets.CLOUDFLARE_PASSWORD }}
  CONTENT_MANAGER_EMAIL: ${{ secrets.CONTENT_MANAGER_EMAIL }}
  CONTENT_MANAGER_PAT: ${{ secrets.CONTENT_MANAGER_PAT }}
  CR_PAT: ${{ secrets.CR_PAT }}
  EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
  EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
  EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
  EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
  ENVIRONMENT: prod
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  IMGUR_CLIENT_ID: ${{ secrets.IMGUR_CLIENT_ID }}
  IMGUR_CLIENT_SECRET: ${{ secrets.IMGUR_CLIENT_SECRET }}
  POSTGRES_DB: modularhistory
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  RCLONE_GDRIVE_SA_CREDENTIALS: ${{ secrets.RCLONE_GDRIVE_SA_CREDENTIALS }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  SENTRY_FRONTEND_DSN: ${{ secrets.SENTRY_FRONTEND_DSN }}
  SERVER: ${{ secrets.SERVER }}
  SHA: ${{ github.sha }}
  SOCIAL_AUTH_DISCORD_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_DISCORD_CLIENT_ID }}
  SOCIAL_AUTH_DISCORD_KEY: ${{ secrets.SOCIAL_AUTH_DISCORD_KEY }}
  SOCIAL_AUTH_DISCORD_SECRET: ${{ secrets.SOCIAL_AUTH_DISCORD_SECRET }}
  SOCIAL_AUTH_FACEBOOK_KEY: ${{ secrets.SOCIAL_AUTH_FACEBOOK_KEY }}
  SOCIAL_AUTH_FACEBOOK_SECRET: ${{ secrets.SOCIAL_AUTH_FACEBOOK_SECRET }}
  SOCIAL_AUTH_GITHUB_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_GITHUB_CLIENT_ID }}
  SOCIAL_AUTH_GITHUB_SECRET: ${{ secrets.SOCIAL_AUTH_GITHUB_SECRET }}
  SOCIAL_AUTH_GOOGLE_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_GOOGLE_CLIENT_ID }}
  SOCIAL_AUTH_GOOGLE_SECRET: ${{ secrets.SOCIAL_AUTH_GOOGLE_SECRET }}
  SOCIAL_AUTH_TWITTER_KEY: ${{ secrets.SOCIAL_AUTH_TWITTER_KEY }}
  SOCIAL_AUTH_TWITTER_SECRET: ${{ secrets.SOCIAL_AUTH_TWITTER_SECRET }}
  SSH_AUTH_SOCK: /tmp/ssh_agent.sock
  X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
jobs:
  push-django:
    environment: prod
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
        - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - name: ‚è∞ üõÇ üìï - Checking workflow expansion is up to date
      uses: mithro/actions-includes@main
      if: runner.os == 'Linux'
      continue-on-error: false
      with:
        workflow: .github/workflows/delivery.yml
    - name: Check out main branch
      uses: actions/checkout@v2.3.4
      with:
        fetch-depth: 0
    - name: Set up Python 3.9
      uses: actions/setup-python@v2.2.2
      with:
        python-version: 3.9
    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info[:3]))")
    - name: Add hosts to /etc/hosts
      run: |
        sudo echo "127.0.0.1 postgres" | sudo tee -a /etc/hosts
        sudo echo "127.0.0.1 redis" | sudo tee -a /etc/hosts
      shell: bash
    - name: Install PyInvoke config
      run: |
        sudo cp config/invoke.yaml /etc/invoke.yaml
      shell: bash
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1.1.8
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Cache Python virtual environment
      uses: actions/cache@v2
      id: venv-cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Test poetry environment (A)
      id: venv-test
      continue-on-error: true
      if: ${{ steps.venv-cache.outputs.cache-hit == 'true' }}
      run: poetry run invoke debug
    - name: Install Python dependencies
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: |
        poetry --version
        echo "${{ runner.os }}" | grep -i --quiet "macos" && brew install graphviz || sudo apt-get install -y graphviz graphviz-dev
        poetry install --no-root
    - name: Test poetry environment (B)
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: poetry run invoke debug
    - name: Create .env file
      run: echo "" | grep -i --quiet "dev" && poetry run invoke setup.write-env-file --dev || poetry run invoke setup.write-env-file
    - name: Inject environment vars
      run: poetry run invoke setup.write-env-file
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1.10.0
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT }}
    - name: Build image
      id: build
      continue-on-error: true
      uses: docker/build-push-action@v2
      with:
        build-args: |
          ENVIRONMENT=prod
        builder: ${{ steps.buildx.outputs.name }}
        cache-from: type=gha,scope=django
        cache-to: type=gha,mode=max,scope=django
        context: .
        file: ./build/Dockerfile.django
        load: false
        push: true
        secret-files: ENV_FILE=./.env
        tags: ghcr.io/modularhistory/django:${{ github.sha }},ghcr.io/modularhistory/django:latest
    - name: Build image (retry without cache)
      if: ${{ steps.build.outcome == 'failure' }}
      uses: docker/build-push-action@v2
      with:
        build-args: |
          ENVIRONMENT=prod
        builder: ${{ steps.buildx.outputs.name }}
        context: .
        file: ./build/Dockerfile.django
        load: false
        push: true
        no-cache: true
        secret-files: ENV_FILE=./.env
        tags: ghcr.io/modularhistory/django:${{ github.sha }},ghcr.io/modularhistory/django:latest
    - name: Run Snyk to check image for vulnerabilities
      continue-on-error: true
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ghcr.io/modularhistory/django:${{ github.sha }}
        args: --file=Dockerfile.django
  push-react:
    environment: prod
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
        - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - name: ‚è∞ üõÇ üìï - Checking workflow expansion is up to date
      uses: mithro/actions-includes@main
      if: runner.os == 'Linux'
      continue-on-error: false
      with:
        workflow: .github/workflows/delivery.yml
    - name: Check out main branch
      uses: actions/checkout@v2.3.4
      with:
        fetch-depth: 0
    - name: Set up Python 3.9
      uses: actions/setup-python@v2.2.2
      with:
        python-version: 3.9
    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info[:3]))")
    - name: Add hosts to /etc/hosts
      run: |
        sudo echo "127.0.0.1 postgres" | sudo tee -a /etc/hosts
        sudo echo "127.0.0.1 redis" | sudo tee -a /etc/hosts
      shell: bash
    - name: Install PyInvoke config
      run: |
        sudo cp config/invoke.yaml /etc/invoke.yaml
      shell: bash
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1.1.8
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Cache Python virtual environment
      uses: actions/cache@v2
      id: venv-cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Test poetry environment (A)
      id: venv-test
      continue-on-error: true
      if: ${{ steps.venv-cache.outputs.cache-hit == 'true' }}
      run: poetry run invoke debug
    - name: Install Python dependencies
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: |
        poetry --version
        echo "${{ runner.os }}" | grep -i --quiet "macos" && brew install graphviz || sudo apt-get install -y graphviz graphviz-dev
        poetry install --no-root
    - name: Test poetry environment (B)
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: poetry run invoke debug
    - name: Create .env file
      run: echo "" | grep -i --quiet "dev" && poetry run invoke setup.write-env-file --dev || poetry run invoke setup.write-env-file
    - name: Inject environment vars
      run: poetry run invoke setup.write-env-file
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1.10.0
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT }}
    - name: Build image
      id: build
      continue-on-error: true
      uses: docker/build-push-action@v2
      with:
        build-args: |
          ENVIRONMENT=prod
        builder: ${{ steps.buildx.outputs.name }}
        cache-from: type=gha,scope=react
        cache-to: type=gha,mode=max,scope=react
        context: .
        file: ./build/Dockerfile.react
        load: false
        push: true
        secret-files: ENV_FILE=./.env
        tags: ghcr.io/modularhistory/react:${{ github.sha }},ghcr.io/modularhistory/react:latest
    - name: Build image (retry without cache)
      if: ${{ steps.build.outcome == 'failure' }}
      uses: docker/build-push-action@v2
      with:
        build-args: |
          ENVIRONMENT=prod
        builder: ${{ steps.buildx.outputs.name }}
        context: .
        file: ./build/Dockerfile.react
        load: false
        push: true
        no-cache: true
        secret-files: ENV_FILE=./.env
        tags: ghcr.io/modularhistory/react:${{ github.sha }},ghcr.io/modularhistory/react:latest
    - name: Run Snyk to check image for vulnerabilities
      continue-on-error: true
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ghcr.io/modularhistory/react:${{ github.sha }}
        args: --file=Dockerfile.react
  push-webserver:
    environment: prod
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
        - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - name: ‚è∞ üõÇ üìï - Checking workflow expansion is up to date
      uses: mithro/actions-includes@main
      if: runner.os == 'Linux'
      continue-on-error: false
      with:
        workflow: .github/workflows/delivery.yml
    - name: Check out main branch
      uses: actions/checkout@v2.3.4
      with:
        fetch-depth: 0
    - name: Set up Python 3.9
      uses: actions/setup-python@v2.2.2
      with:
        python-version: 3.9
    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info[:3]))")
    - name: Add hosts to /etc/hosts
      run: |
        sudo echo "127.0.0.1 postgres" | sudo tee -a /etc/hosts
        sudo echo "127.0.0.1 redis" | sudo tee -a /etc/hosts
      shell: bash
    - name: Install PyInvoke config
      run: |
        sudo cp config/invoke.yaml /etc/invoke.yaml
      shell: bash
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1.1.8
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Cache Python virtual environment
      uses: actions/cache@v2
      id: venv-cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Test poetry environment (A)
      id: venv-test
      continue-on-error: true
      if: ${{ steps.venv-cache.outputs.cache-hit == 'true' }}
      run: poetry run invoke debug
    - name: Install Python dependencies
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: |
        poetry --version
        echo "${{ runner.os }}" | grep -i --quiet "macos" && brew install graphviz || sudo apt-get install -y graphviz graphviz-dev
        poetry install --no-root
    - name: Test poetry environment (B)
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: poetry run invoke debug
    - name: Create .env file
      run: echo "" | grep -i --quiet "dev" && poetry run invoke setup.write-env-file --dev || poetry run invoke setup.write-env-file
    - name: Inject environment vars
      run: poetry run invoke setup.write-env-file
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1.10.0
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT }}
    - name: Build image
      id: build
      continue-on-error: true
      uses: docker/build-push-action@v2
      with:
        build-args: |
          ENVIRONMENT=prod
        builder: ${{ steps.buildx.outputs.name }}
        cache-from: type=gha,scope=webserver
        cache-to: type=gha,mode=max,scope=webserver
        context: .
        file: ./build/Dockerfile.webserver
        load: false
        push: true
        secret-files: ENV_FILE=./.env
        tags: ghcr.io/modularhistory/webserver:${{ github.sha }},ghcr.io/modularhistory/webserver:latest
    - name: Build image (retry without cache)
      if: ${{ steps.build.outcome == 'failure' }}
      uses: docker/build-push-action@v2
      with:
        build-args: |
          ENVIRONMENT=prod
        builder: ${{ steps.buildx.outputs.name }}
        context: .
        file: ./build/Dockerfile.webserver
        load: false
        push: true
        no-cache: true
        secret-files: ENV_FILE=./.env
        tags: ghcr.io/modularhistory/webserver:${{ github.sha }},ghcr.io/modularhistory/webserver:latest
    - name: Run Snyk to check image for vulnerabilities
      continue-on-error: true
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ghcr.io/modularhistory/webserver:${{ github.sha }}
        args: --file=Dockerfile.webserver
  deploy:
    needs: [push-django, push-react, push-webserver]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
        - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    environment: prod
    steps:
    - name: ‚è∞ üõÇ üìï - Checking workflow expansion is up to date
      uses: mithro/actions-includes@main
      if: runner.os == 'Linux'
      continue-on-error: false
      with:
        workflow: .github/workflows/delivery.yml
    - name: Check out main branch
      uses: actions/checkout@v2.3.4
      with:
        fetch-depth: 0
    - name: Set up Python 3.9
      uses: actions/setup-python@v2.2.2
      with:
        python-version: 3.9
    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info[:3]))")
    - name: Add hosts to /etc/hosts
      run: |
        sudo echo "127.0.0.1 postgres" | sudo tee -a /etc/hosts
        sudo echo "127.0.0.1 redis" | sudo tee -a /etc/hosts
      shell: bash
    - name: Install PyInvoke config
      run: |
        sudo cp config/invoke.yaml /etc/invoke.yaml
      shell: bash
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1.1.8
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Cache Python virtual environment
      uses: actions/cache@v2
      id: venv-cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Test poetry environment (A)
      id: venv-test
      continue-on-error: true
      if: ${{ steps.venv-cache.outputs.cache-hit == 'true' }}
      run: poetry run invoke debug
    - name: Install Python dependencies
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: |
        poetry --version
        echo "${{ runner.os }}" | grep -i --quiet "macos" && brew install graphviz || sudo apt-get install -y graphviz graphviz-dev
        poetry install --no-root
    - name: Test poetry environment (B)
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: poetry run invoke debug
    - name: Create .env file
      run: echo "" | grep -i --quiet "dev" && poetry run invoke setup.write-env-file --dev || poetry run invoke setup.write-env-file
    - name: Inject environment vars
      run: poetry run invoke setup.write-env-file
    - name: Deploy images to server
      id: deploy-image
      run: |
        echo "Adding GitHub to known hosts..."
        mkdir -p ~/.ssh
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        ssh-keyscan github.com >> ~/.ssh/known_hosts
        ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}"
        echo "Transferring files to $SERVER..."
        scp -o StrictHostKeyChecking=no -P ${{ secrets.SSH_PORT }} -r ./.env ./docker-compose.yml ./docker-compose.prod.yml ./config modularhistory@$SERVER:~/
        echo "Starting SSH session with $SERVER..."
        ssh -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} modularhistory@$SERVER << 'ENDSSH'
          echo "" && echo "Setting environment variables..."
          set -a && source .env && echo "Finished setting environment variables."
          set +a; bash config/scripts/deploy.sh
        ENDSSH
    - name: Create Sentry release
      uses: getsentry/action-release@v1.1.6
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
      with:
        environment: prod
