# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions

name: Django CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 3
      matrix:
        python-version: [3.6, 3.7]
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    # Check out master
    - uses: actions/checkout@v2
    # Set up Python
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    # Install dependencies
    - name: Install dependencies
      if: ${{ success() }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    # Run tests
    - name: Run tests
      if: ${{ success() }}
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
      run: |
        python manage.py migrate
        python manage.py test
  deploy:
    needs: build
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
    # Checkout master
    - name: Checkout master
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Fetch entire history so we can analyze commits since last tag
    # Bump version and push tag
    - name: Bump version and push tag
      id: version
      if: ${{ success() }}
      uses: mathieudutour/github-tag-action@v4.5  # https://github.com/marketplace/actions/github-tag
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
    # Set up Python 3.7
    - name: Set up Python 3.7
      if: ${{ success() }}
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    # Install dependencies
    - name: Install dependencies
      if: ${{ success() }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    # Setup gcloud environment
    - name: Setup gcloud environment
      if: ${{ success() }}
      uses: GoogleCloudPlatform/github-actions/setup-gcloud@master  # https://github.com/GoogleCloudPlatform/github-actions/blob/master/setup-gcloud/README.md
      with:
        project_id: modularhistory
        service_account_key: ${{ secrets.GCP_CREDENTIALS }}
        export_default_credentials: true
    # Print gcloud info
    - name: Print gcloud info
      if: ${{ success() }}
      run: gcloud info
    # Retrieve secrets
    - name: Retrieve secrets
      id: secrets
      if: ${{ success() }}
      uses: GoogleCloudPlatform/github-actions/get-secretmanager-secrets@master  # https://github.com/GoogleCloudPlatform/github-actions/blob/master/get-secretmanager-secrets/README.md
      with:
        secrets: |-
          DB_NAME:modularhistory/DB_NAME
          DB_USER:modularhistory/DB_USER
          DB_PASSWORD:modularhistory/DB_PASSWORD
    # Inject environment vars
    - name: Set environment vars
      env:
        ADMINS: ${{ secrets.ADMINS }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DB_NAME: ${{ steps.secrets.outputs.DB_NAME }}
        DB_USER: ${{ steps.secrets.outputs.DB_USER }}
        DB_PASSWORD: ${{ steps.secrets.outputs.DB_PASSWORD }}
        SOCIAL_AUTH_TWITTER_KEY: ${{ secrets.SOCIAL_AUTH_TWITTER_KEY }}
        SOCIAL_AUTH_TWITTER_SECRET: ${{ secrets.SOCIAL_AUTH_TWITTER_SECRET }}
        SOCIAL_AUTH_FACEBOOK_KEY: ${{ secrets.SOCIAL_AUTH_FACEBOOK_KEY }}
        SOCIAL_AUTH_FACEBOOK_SECRET: ${{ secrets.SOCIAL_AUTH_FACEBOOK_SECRET }}
        SOCIAL_AUTH_GITHUB_KEY: ${{ secrets.SOCIAL_AUTH_GITHUB_KEY }}
        SOCIAL_AUTH_GITHUB_SECRET: ${{ secrets.SOCIAL_AUTH_GITHUB_SECRET }}
        EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
        EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
        EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
        EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
        ALPHA_VANTAGE_ACCESS_KEY: ${{ secrets.ALPHA_VANTAGE_ACCESS_KEY }}
        X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
        MEGA_USERNAME: ${{ secrets.MEGA_USERNAME }}
        MEGA_PASSWORD: ${{ secrets.MEGA_PASSWORD }}
        GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS_FILE }}
      run: |
        pwd
        echo "${{ secrets.GCP_CREDENTIALS }}" > ${{ secrets.GCP_CREDENTIALS_FILE }}
        ls
        envsubst < env.yaml > env.yaml.tmp && mv env.yaml.tmp env.yaml
    # Collect static files
    - name: Collect static files
      if: ${{ success() }}
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
      run: python manage.py collectstatic
    # Deploy to Google Cloud
    - name: Deploy
      if: ${{ success() }}
      run: gcloud app deploy app.yaml
    # Create Sentry release
    - name: Create Sentry release
      if: ${{ success() }}
      uses: getsentry/action-release@v1.0.0
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
      with:
        environment: production
