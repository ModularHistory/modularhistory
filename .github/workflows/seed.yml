# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions

name: seed
on:
  workflow_dispatch:
    inputs:
      email:
        description: Email address associated with GitHub account and ModularHistory account
        required: true
env:
  ENVIRONMENT: dev
  SHA: latest
jobs:
  dotenv_file:
    runs-on: ubuntu-latest
    environment: dev
    env:
      ADMINS: '${{ secrets.ADMINS }}'
      ALPHA_VANTAGE_ACCESS_KEY: ${{ secrets.ALPHA_VANTAGE_ACCESS_KEY }}
      BRAINTREE_MERCHANT_ID: ${{ secrets.BRAINTREE_MERCHANT_ID }}
      BRAINTREE_PUBLIC_KEY: ${{ secrets.BRAINTREE_PUBLIC_KEY }}
      BRAINTREE_PRIVATE_KEY: ${{ secrets.BRAINTREE_PRIVATE_KEY }}
      DJANGO_SUPERUSER_EMAIL: ${{ github.event.inputs.email }}
      ELASTIC_PASSWORD: ${{ secrets.ELASTIC_PASSWORD }}
      EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
      EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
      EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
      FACEBOOK_APP_ID: ${{ secrets.FACEBOOK_APP_ID }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_BACKEND_DSN: ${{ secrets.SENTRY_BACKEND_DSN }}
      SENTRY_FRONTEND_DSN: ${{ secrets.SENTRY_FRONTEND_DSN }}
      AUTH_DISCORD_KEY: ${{ secrets.SOCIAL_AUTH_DISCORD_KEY }}
      AUTH_DISCORD_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_DISCORD_CLIENT_ID }}
      AUTH_DISCORD_SECRET: ${{ secrets.SOCIAL_AUTH_DISCORD_SECRET }}
      AUTH_FACEBOOK_KEY: ${{ secrets.SOCIAL_AUTH_FACEBOOK_KEY }}
      AUTH_FACEBOOK_SECRET: ${{ secrets.SOCIAL_AUTH_FACEBOOK_SECRET }}
      AUTH_GITHUB_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_GITHUB_CLIENT_ID }}
      AUTH_GITHUB_SECRET: ${{ secrets.SOCIAL_AUTH_GITHUB_SECRET }}
      AUTH_GOOGLE_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_GOOGLE_CLIENT_ID }}
      AUTH_GOOGLE_SECRET: ${{ secrets.SOCIAL_AUTH_GOOGLE_SECRET }}
      AUTH_TWITTER_KEY: ${{ secrets.SOCIAL_AUTH_TWITTER_KEY }}
      AUTH_TWITTER_SECRET: ${{ secrets.SOCIAL_AUTH_TWITTER_SECRET }}
      RCLONE_GDRIVE_SA_CREDENTIALS: ${{ secrets.RCLONE_GDRIVE_SA_CREDENTIALS }}
    steps:
    - name: Check out main branch
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Python 3.9
      uses: actions/setup-python@v4.2.0
      with:
        python-version: 3.9
    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info[:3]))")
    - name: Specify Docker Compose version
      run: |
        echo ""
        echo "Installed version: $(docker compose version)"
        version=2.2.1
        docker compose version | grep --quiet "$version" || {
          echo "Installing Docker Compose version $version ..."
          mkdir -p ~/.docker/cli-plugins/
          curl -SL "https://github.com/docker/compose/releases/download/v${version}/docker-compose-linux-x86_64" -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
          echo "Installed version: $(docker compose version)"
        }
    - name: Configure Docker Compose
      shell: bash
      run: |
        echo "Configuring Docker Compose..."
        if [[ -f docker-compose.dev.yml ]]; then
          echo "Using docker-compose.dev.yml for default overrides..."
          cp docker-compose.dev.yml docker-compose.override.yml
        fi
        echo "Done."
    - name: Add hosts to /etc/hosts
      shell: bash
      run: |
        hosts=("postgres" "redis" "elasticsearch" "modularhistory.dev.net")
        echo "Updating hosts file..."
        for host in "${hosts[@]}"; do
          sudo echo "127.0.0.1 $host" | sudo tee -a /etc/hosts
        done
        echo "Done."
    - name: Install PyInvoke config
      run: |
        sudo cp .config/invoke.yaml /etc/invoke.yaml
      shell: bash
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1.3
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Cache Python virtual environment
      uses: actions/cache@v3
      id: venv-cache
      with:
        path: .venv
        key: venv-ubuntu-latest-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Test poetry environment (A)
      id: venv-test
      continue-on-error: true
      if: ${{ steps.venv-cache.outputs.cache-hit == 'true' }}
      run: cd backend && poetry run invoke debug && cd ..
    - name: Install Python dependencies
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: ROOT_DIR=$(pwd) bash .config/scripts/install-deps.sh
    - name: Test poetry environment (B)
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: cd backend && poetry run invoke debug && cd ..
    - name: Archive .env file
      uses: actions/upload-artifact@v3
      with:
        name: dotenv-file
        path: .env
        retention-days: 1
