# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions

name: integration

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
    paths-ignore:
      - '.gitignore'
      - '.github/**'
      - '!.github/integration.yml'
      - '.idea/**'
      - '.vscode/**'
      - '**.md'
      - '**.rst'
      - 'config/hooks/**'
  schedule:
    - cron: '0 9 * * *'

env:
  ADMINS: ${{ secrets.ADMINS }}
  ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
  ALPHA_VANTAGE_ACCESS_KEY: ${{ secrets.ALPHA_VANTAGE_ACCESS_KEY }}
  BRAINTREE_MERCHANT_ID: ${{ secrets.BRAINTREE_MERCHANT_ID }}
  BRAINTREE_PUBLIC_KEY: ${{ secrets.BRAINTREE_PUBLIC_KEY }}
  BRAINTREE_PRIVATE_KEY: ${{ secrets.BRAINTREE_PRIVATE_KEY }}
  CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
  CLOUDFLARE_PASSWORD: ${{ secrets.CLOUDFLARE_PASSWORD }}
  CONTENT_MANAGER_EMAIL: ${{ secrets.CONTENT_MANAGER_EMAIL }}
  CONTENT_MANAGER_PAT: ${{ secrets.CONTENT_MANAGER_PAT }}
  CR_PAT: ${{ secrets.CR_PAT }}
  EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
  EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
  EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
  EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  IMGUR_CLIENT_ID: ${{ secrets.IMGUR_CLIENT_ID }}
  IMGUR_CLIENT_SECRET: ${IMGUR_CLIENT_SECRET}
  POSTGRES_HOST: postgres
  POSTGRES_DB: postgres
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  RCLONE_GDRIVE_SA_CREDENTIALS: ${{ secrets.RCLONE_GDRIVE_SA_CREDENTIALS }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  SENTRY_FRONTEND_DSN: ${{ secrets.SENTRY_FRONTEND_DSN }}
  SHA: ${{ github.sha }}
  SOCIAL_AUTH_DISCORD_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_DISCORD_CLIENT_ID }}
  SOCIAL_AUTH_DISCORD_KEY: ${{ secrets.SOCIAL_AUTH_DISCORD_KEY }}
  SOCIAL_AUTH_DISCORD_SECRET: ${{ secrets.SOCIAL_AUTH_DISCORD_SECRET }}
  SOCIAL_AUTH_FACEBOOK_KEY: ${{ secrets.SOCIAL_AUTH_FACEBOOK_KEY }}
  SOCIAL_AUTH_FACEBOOK_SECRET: ${{ secrets.SOCIAL_AUTH_FACEBOOK_SECRET }}
  SOCIAL_AUTH_GITHUB_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_GITHUB_CLIENT_ID }}
  SOCIAL_AUTH_GITHUB_SECRET: ${{ secrets.SOCIAL_AUTH_GITHUB_SECRET }}
  SOCIAL_AUTH_GOOGLE_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_GOOGLE_CLIENT_ID }}
  SOCIAL_AUTH_GOOGLE_SECRET: ${{ secrets.SOCIAL_AUTH_GOOGLE_SECRET }}
  SOCIAL_AUTH_TWITTER_KEY: ${{ secrets.SOCIAL_AUTH_TWITTER_KEY }}
  SOCIAL_AUTH_TWITTER_SECRET: ${{ secrets.SOCIAL_AUTH_TWITTER_SECRET }}
  X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }} 

jobs:
  changed-files:
    name: Get changed files
    runs-on: ubuntu-latest
    outputs:
      added-files: ${{ steps.changed-files.outputs.added_files }}
      deleted-files: ${{ steps.changed-files.outputs.deleted_files }}
      modified-files: ${{ steps.changed-files.outputs.modified_files }}
      all-changed-files: ${{ steps.changed-files.outputs.all_changed_files }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Get changed files
      id: changed-files
      # https://github.com/tj-actions/changed-files
      uses: tj-actions/changed-files@v1.0.1

  setup-script:
    name: Test setup script
    needs: changed-files
    if: ${{ contains(needs.changed-files.outputs.modified-files, 'setup.sh') }}
    strategy:
      matrix:
        # OS options: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
        # NOTE: Services (running in Docker containers) only work on ubuntu.
        os: [ macos-latest, ubuntu-latest ]
        python-version: [ 3.9 ]
    runs-on: ${{ matrix.os }}
    environment: dev
    env:
      TESTING: true
    steps:
    - includes: ./.github/actions/setup
      with:
        os: ${{ runner.os }}
        python-version: ${{ matrix.python-version }}
        environment: dev
    - name: Run setup script
      run: bash setup.sh
      shell: bash

  build:
    name: Build image
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 3
      matrix:
        image: [ django, react, webserver ]
    environment: test
    steps:
    - includes: ./.github/actions/setup
      with:
        os: ${{ runner.os }}
        environment: test
    - includes: ./.github/actions/build
      with:
        os: ${{ runner.os }}
        image: ${{ matrix.image }}
        tags: ghcr.io/modularhistory/${{ matrix.image }}:${{ github.sha }}
        push: true

  pytest:
    name: Run backend integration tests
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 3
      matrix:
        python-version: [ 3.9 ]
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started.
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        ports:
          - 6379:6379
        # Set health checks to wait until redis has started.
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
    environment: test
    env:
      TESTING: true
    steps:
    - includes: ./.github/actions/setup
      with:
        os: ${{ runner.os }}
        python-version: ${{ matrix.python-version }}
        environment: test
    - name: Make sure pytest is working
      run: |
        echo "def test_pytest(): pass" > nothing.py
        poetry run pytest nothing.py
    - name: Run tests
      run: poetry run invoke test --no-docker

  e2e:
    name: Run e2e tests
    needs: [build]
    environment: test
    env:
      ENVIRONMENT: test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: [ chrome, firefox ]
        container: [ 1, 2 ]
      max-parallel: 4
    continue-on-error: true
    steps:
    - includes: ./.github/actions/setup
      with:
        os: ${{ runner.os }}
        environment: test
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1.10.0
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT }}
    - name: Create writable volume directories
      run: |
        writable_dirs=( ".backups" ".init" "_static" "_media" )
        for writable_dir in "${writable_dirs[@]}"; do
          mkdir -p "$writable_dir"; {
            sudo chown -R www-data:www-data "$writable_dir" && 
            sudo chmod a+w -R "$writable_dir"
          } || exit 1
        done
    - uses: actions/cache@v2
      id: data-cache
      with:
        path: .init
        key: data
    - name: Fetch data
      if: ${{ steps.data-cache.outputs.cache-hit != 'true' }}
      run: |
        test -w .init || {
          echo "Cannot write in .init directory."; exit 1
        }
        rclone --help &>/dev/null || {
          curl https://rclone.org/install.sh | sudo bash 
        } || exit 1
        poetry run invoke db.seed --remote
    - name: Start up containers
      shell: bash
      run: |
        shopt -s expand_aliases
        alias compose="docker-compose -f docker-compose.yml -f docker-compose.test.yml"
        echo "Starting containers with version $SHA ..."
        compose up -d webserver; compose logs; echo ""; compose ps
        [[ ! "$(compose ps)" =~ webserver ]] && exit 1
        healthy=false; timeout=300; interval=20; waited=0
        while [[ "$healthy" = false ]]; do
          healthy=true; [[ "$(compose ps)" =~ (Exit|unhealthy|starting) ]] && healthy=false
          if [[ "$healthy" = false ]]; then 
            compose logs --tail 20; echo ""; compose ps; echo ""
            echo "Waiting for containers (${waited}s) ..."; echo ""
            sleep $interval; waited=$((waited + interval))
            if [[ $waited -gt $timeout ]]; then 
              echo "Timed out."; compose logs; exit 1
            fi
          fi
        done; compose ps
    - name: Run Cypress
      env:
        CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
        # Pass the GitHub token to determine the unique run id necessary to re-run the checks.
        # https://docs.github.com/en/actions/reference/authentication-in-a-workflow
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: >
        docker-compose -f docker-compose.yml -f docker-compose.test.yml run cypress
        --browser ${{ matrix.browser }} --group "${{ matrix.browser }}"
        --parallel --ci-build-id $GITHUB_TOKEN --record --key $CYPRESS_RECORD_KEY

  check-types:
    name: Check types
    needs: changed-files
    if: ${{ contains(needs.changed-files.outputs.modified-files, 'py') }}
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 3
      matrix:
        executable: [ mypy, pytype ]
        python-version: [ 3.9 ]
    continue-on-error: ${{ matrix.executable == 'mypy' }}
    environment: test
    steps:
    - 
      includes: ./.github/actions/setup
      with:
        os: ${{ runner.os }}
        python-version: ${{ matrix.python-version }}
        environment: test
    - 
      name: Cache type stubs
      id: cache-stubs
      uses: actions/cache@v2
      with:
        path: .cache/${{ matrix.executable }}
        key: ${{ matrix.python-version }}-${{ matrix.executable }}-types
    - 
      name: Determine args
      id: args
      run: |
        if [ ${{ matrix.executable }} = mypy ]; then args="--config-file=./setup.cfg .";
        elif [ ${{ matrix.executable }} = pytype ]; then args="--config=./setup.cfg"; fi;
        echo "::set-output name=args::$args"
    -
      name: Run static type checker
      run: poetry run ${{ matrix.executable }} ${{ steps.args.outputs.args }}

  analyze:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'python' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more: https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed
    # Don't cancel other jobs if CodeQL analysis fails.
    continue-on-error: true
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2.3.4
    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main
    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    - name: Autobuild
      uses: github/codeql-action/autobuild@v1
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1

  OSSAR-Scan:
    name: OSSAR Scan
    # OSSAR runs on windows-latest.
    # ubuntu-latest and macos-latest support coming soon.
    runs-on: windows-latest
    # OSSAR is in beta and sometimes has spurious errors, so...
    # For the time being, allow the job to complete despite any errors.
    continue-on-error: true
    steps:
    # https://github.community/t/filename-too-long-error-for-windows-2019-checkout/16676
    - name: Support longpaths
      run: git config --system core.longpaths true
    # Checkout your code repository to scan
    - name: Checkout repository
      uses: actions/checkout@v2.3.4
      with:
        # We must fetch at least the immediate parents so that if this is
        # a pull request then we can checkout the head.
        fetch-depth: 2
    # If this run was triggered by a pull request event, then checkout
    # the head of the pull request instead of the merge commit.
    - run: git checkout HEAD^2
      if: ${{ github.event_name == 'pull_request' }}
    # Run open source static analysis tools
    - name: Run OSSAR
      uses: github/ossar-action@v1
      id: ossar
    # Upload results to the Security tab
    - name: Upload OSSAR results
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: ${{ steps.ossar.outputs.sarifFile }}
