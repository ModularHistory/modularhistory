# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions

name: delivery

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '.gitignore'
      - '.github/**'
      - '!.github/delivery.yml'
      - '.idea/**'
      - '.vscode/**'
      - '**.md'
      - '**.rst'
      - '**.txt'
      - 'tests.py'
      - 'setup.sh'
      - 'config/hooks/**'

env:
  ENVIRONMENT: prod
  SHA: ${{ github.sha }}

jobs:
  push-django:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - includes: ./.github/actions/setup
      with:
        os: ${{ runner.os }}
        python-version: 3.9
        # Fetch entire history so we can analyze commits since last tag.
        fetch-depth: 0
    - name: Inject environment vars
      run: poetry run invoke setup.write-env-file
    - includes: ./.github/actions/build
      with:
        os: ${{ runner.os }}
        image: django
    - name: Build and push Docker images
      run: poetry run invoke build --github-actor=$GITHUB_ACTOR --access-token=$CR_PAT --sha=$SHA --environment=prod --push
  
  push-react:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - includes: ./.github/actions/setup
      with:
        os: ${{ runner.os }}
        python-version: 3.9
        # Fetch entire history so we can analyze commits since last tag.
        fetch-depth: 0
    - name: Inject environment vars
      run: poetry run invoke setup.write-env-file
    - includes: ./.github/actions/build
      with:
        os: ${{ runner.os }}
        image: react
    - name: Build and push Docker images
      run: poetry run invoke build --github-actor=$GITHUB_ACTOR --access-token=$CR_PAT --sha=$SHA --environment=prod --push
  
  push-webserver:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - includes: ./.github/actions/setup
      with:
        os: ${{ runner.os }}
        python-version: 3.9
        # Fetch entire history so we can analyze commits since last tag.
        fetch-depth: 0
    - name: Inject environment vars
      run: poetry run invoke setup.write-env-file
    - includes: ./.github/actions/build
      with:
        os: ${{ runner.os }}
        image: webserver
    - name: Build and push Docker images
      run: poetry run invoke build --github-actor=$GITHUB_ACTOR --access-token=$CR_PAT --sha=$SHA --environment=prod --push

  deploy:
    needs: [push-django, push-react, push-webserver]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      ADMINS: ${{ secrets.ADMINS }}
      ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
      ALPHA_VANTAGE_ACCESS_KEY: ${{ secrets.ALPHA_VANTAGE_ACCESS_KEY }}
      CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
      CLOUDFLARE_PASSWORD: ${{ secrets.CLOUDFLARE_PASSWORD }}
      CR_PAT: ${{ secrets.CR_PAT }}
      EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
      EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
      EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      IMGUR_CLIENT_ID: ${{ secrets.IMGUR_CLIENT_ID }}
      IMGUR_CLIENT_SECRET: ${{ secrets.IMGUR_CLIENT_SECRET }}
      MEGA_USERNAME: ${{ secrets.MEGA_USERNAME }}
      MEGA_PASSWORD: ${{ secrets.MEGA_PASSWORD }}
      POSTGRES_DB: modularhistory
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      RCLONE_GDRIVE_SA_CREDENTIALS: ${{ secrets.RCLONE_GDRIVE_SA_CREDENTIALS }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_FRONTEND_DSN: ${{ secrets.SENTRY_FRONTEND_DSN }}
      SERVER: ${{ secrets.SERVER }}
      SOCIAL_AUTH_DISCORD_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_DISCORD_CLIENT_ID }}
      SOCIAL_AUTH_DISCORD_KEY: ${{ secrets.SOCIAL_AUTH_DISCORD_KEY }}
      SOCIAL_AUTH_DISCORD_SECRET: ${{ secrets.SOCIAL_AUTH_DISCORD_SECRET }}
      SOCIAL_AUTH_FACEBOOK_KEY: ${{ secrets.SOCIAL_AUTH_FACEBOOK_KEY }}
      SOCIAL_AUTH_FACEBOOK_SECRET: ${{ secrets.SOCIAL_AUTH_FACEBOOK_SECRET }}
      SOCIAL_AUTH_GITHUB_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_GITHUB_CLIENT_ID }}
      SOCIAL_AUTH_GITHUB_SECRET: ${{ secrets.SOCIAL_AUTH_GITHUB_SECRET }}
      SOCIAL_AUTH_GOOGLE_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_GOOGLE_CLIENT_ID }}
      SOCIAL_AUTH_GOOGLE_SECRET: ${{ secrets.SOCIAL_AUTH_GOOGLE_SECRET }}
      SOCIAL_AUTH_TWITTER_KEY: ${{ secrets.SOCIAL_AUTH_TWITTER_KEY }}
      SOCIAL_AUTH_TWITTER_SECRET: ${{ secrets.SOCIAL_AUTH_TWITTER_SECRET }}
      SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
    environment: prod
    steps:
    - includes: ./.github/actions/setup
      with:
        os: ${{ runner.os }}
        python-version: 3.9
        # Fetch entire history so we can analyze commits since last tag.
        fetch-depth: 0
    - name: Inject environment vars
      run: poetry run invoke setup.write-env-file
    - name: Build and push Docker images
      run: poetry run invoke build --github-actor=$GITHUB_ACTOR --access-token=$CR_PAT --sha=$SHA --environment=prod --push
    - name: Deploy images to server
      id: deploy-image
      run: |
        echo "Adding GitHub to known hosts..."
        mkdir -p ~/.ssh
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        ssh-keyscan github.com >> ~/.ssh/known_hosts
        ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}"
        echo "Transferring files to $SERVER..."
        scp -o StrictHostKeyChecking=no -P ${{ secrets.SSH_PORT }} -r ./.env ./docker-compose.yml ./config modularhistory@$SERVER:~/
        echo "Starting SSH session with $SERVER..."
        ssh -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} modularhistory@$SERVER << 'ENDSSH'
          echo "" && echo "Setting environment variables..."
          set -a && source .env && echo "Finished setting environment variables."
          set +a; bash config/scripts/deploy.sh
        ENDSSH
    - name: Create Sentry release
      uses: getsentry/action-release@v1.1.5
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
      with:
        environment: 'prod'
