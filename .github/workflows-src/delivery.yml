# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions

name: delivery

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '.gitignore'
      - '.github/**'
      - '!.github/delivery.yml'
      - '.idea/**'
      - '.vscode/**'
      - '**.md'
      - '**.rst'
      - '**.txt'
      - 'tests.py'
      - 'setup.sh'

env:
  ENVIRONMENT: prod
  SHA: ${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      ADMINS: ${{ secrets.ADMINS }}
      ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
      ALPHA_VANTAGE_ACCESS_KEY: ${{ secrets.ALPHA_VANTAGE_ACCESS_KEY }}
      CR_PAT: ${{ secrets.CR_PAT }}
      EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
      EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
      EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      IMGUR_CLIENT_ID: ${{ secrets.IMGUR_CLIENT_ID }}
      IMGUR_CLIENT_SECRET: ${{ secrets.IMGUR_CLIENT_SECRET }}
      MEGA_DEV_USERNAME: ${{ secrets.MEGA_DEV_USERNAME }}
      MEGA_DEV_PASSWORD: ${{ secrets.MEGA_DEV_PASSWORD }}
      MEGA_USERNAME: ${{ secrets.MEGA_USERNAME }}
      MEGA_PASSWORD: ${{ secrets.MEGA_PASSWORD }}
      MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
      POSTGRES_DB: modularhistory
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      SERVER: kfred.dyndns.org
      SOCIAL_AUTH_DISCORD_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_DISCORD_CLIENT_ID }}
      SOCIAL_AUTH_DISCORD_KEY: ${{ secrets.SOCIAL_AUTH_DISCORD_KEY }}
      SOCIAL_AUTH_DISCORD_SECRET: ${{ secrets.SOCIAL_AUTH_DISCORD_SECRET }}
      SOCIAL_AUTH_FACEBOOK_KEY: ${{ secrets.SOCIAL_AUTH_FACEBOOK_KEY }}
      SOCIAL_AUTH_FACEBOOK_SECRET: ${{ secrets.SOCIAL_AUTH_FACEBOOK_SECRET }}
      SOCIAL_AUTH_GITHUB_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_GITHUB_CLIENT_ID }}
      SOCIAL_AUTH_GITHUB_SECRET: ${{ secrets.SOCIAL_AUTH_GITHUB_SECRET }}
      SOCIAL_AUTH_GOOGLE_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_GOOGLE_CLIENT_ID }}
      SOCIAL_AUTH_GOOGLE_SECRET: ${{ secrets.SOCIAL_AUTH_GOOGLE_SECRET }}
      SOCIAL_AUTH_TWITTER_KEY: ${{ secrets.SOCIAL_AUTH_TWITTER_KEY }}
      SOCIAL_AUTH_TWITTER_SECRET: ${{ secrets.SOCIAL_AUTH_TWITTER_SECRET }}
      SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
    environment: prod
    steps:
    - name: Check out main branch
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Fetch entire history so we can analyze commits since last tag
    - includes: ./.github/actions/setup
      with:
        os: ${{ runner.os }}
        python-version: 3.7
    - name: Inject environment vars
      if: ${{ success() }}
      run: poetry run invoke setup.write-env-file
    - name: Build and push Docker images
      if: ${{ success() }}
      run: poetry run invoke build --github-actor=$GITHUB_ACTOR --access-token=$CR_PAT --sha=$SHA --environment=prod --push
    - name: Deploy images to server
      id: deploy-image
      if: ${{ success() }}
      run: |
        echo "Adding GitHub to known hosts..."
        mkdir -p ~/.ssh
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        ssh-keyscan github.com >> ~/.ssh/known_hosts
        ssh-add - <<< "${{ secrets.DODC_PRIVATE_KEY }}"
        echo "Transferring files to $SERVER..."
        scp -o StrictHostKeyChecking=no -P 2200 -r ./.env ./docker-compose.yml ./ctemplates/error.htm ./config/nginx/prod/nginx.conf ./config modularhistory@$SERVER:~/
        echo "Starting SSH session with $SERVER..."
        ssh -o StrictHostKeyChecking=no -p 2200 modularhistory@$SERVER << 'ENDSSH'
          echo "Working dir:" && pwd && echo "" && ls
          echo "" && echo "Setting environment variables..."
          set -a; source .env; set +a
          echo "" && echo "Logging in to the container registry..."
          docker login ghcr.io -u iacobfred -p $CR_PAT
          echo "Pulling images to $SERVER..."
          docker-compose pull --include-deps django flower react
          echo "" && echo "Restarting server..."
          docker-compose down --remove-orphans
          docker-compose up -d django flower react
          echo "Removing all images not used by existing containers... (https://docs.docker.com/config/pruning/#prune-images)"
          docker image prune -a -f
          docker system prune -f
          echo "" && echo "Updating Nginx config..."
          lxc file push nginx.conf webserver/etc/nginx/sites-available/default
          echo "" && echo "Restarting Nginx server..."
          lxc exec webserver -- service nginx restart
          echo "" && echo "Done."
        ENDSSH
    - name: Create Sentry release
      if: ${{ success() }}
      uses: getsentry/action-release@v1
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
      with:
        environment: 'prod'
