# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions

name: delivery

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '.gitignore'
      - '.github/**'
      - '!.github/delivery.yml'
      - '.idea/**'
      - '.vscode/**'
      - '**.md'
      - '**.rst'
      - '**.txt'
      - 'tests.py'
      - 'setup.sh'
      - 'config/hooks/**'

env:
  ADMINS: ${{ secrets.ADMINS }}
  ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
  ALPHA_VANTAGE_ACCESS_KEY: ${{ secrets.ALPHA_VANTAGE_ACCESS_KEY }}
  BRAINTREE_MERCHANT_ID: ${{ secrets.BRAINTREE_MERCHANT_ID }}
  BRAINTREE_PUBLIC_KEY: ${{ secrets.BRAINTREE_PUBLIC_KEY }}
  BRAINTREE_PRIVATE_KEY: ${{ secrets.BRAINTREE_PRIVATE_KEY }}
  CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
  CLOUDFLARE_PASSWORD: ${{ secrets.CLOUDFLARE_PASSWORD }}
  CONTENT_MANAGER_EMAIL: ${{ secrets.CONTENT_MANAGER_EMAIL }}
  CONTENT_MANAGER_PAT: ${{ secrets.CONTENT_MANAGER_PAT }}
  CR_PAT: ${{ secrets.CR_PAT }}
  ELASTIC_PASSWORD: ${{ secrets.ELASTIC_PASSWORD }}
  EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
  EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
  EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
  EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
  ENVIRONMENT: prod
  FACEBOOK_APP_ID: ${{ secrets.FACEBOOK_APP_ID }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  IMGUR_CLIENT_ID: ${{ secrets.IMGUR_CLIENT_ID }}
  IMGUR_CLIENT_SECRET: ${{ secrets.IMGUR_CLIENT_SECRET }}
  POSTGRES_DB: modularhistory
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  RCLONE_GDRIVE_SA_CREDENTIALS: ${{ secrets.RCLONE_GDRIVE_SA_CREDENTIALS }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  SENTRY_FRONTEND_DSN: ${{ secrets.SENTRY_FRONTEND_DSN }}
  SERVER: ${{ secrets.SERVER }}
  SHA: ${{ github.sha }}
  SOCIAL_AUTH_DISCORD_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_DISCORD_CLIENT_ID }}
  SOCIAL_AUTH_DISCORD_KEY: ${{ secrets.SOCIAL_AUTH_DISCORD_KEY }}
  SOCIAL_AUTH_DISCORD_SECRET: ${{ secrets.SOCIAL_AUTH_DISCORD_SECRET }}
  SOCIAL_AUTH_FACEBOOK_KEY: ${{ secrets.SOCIAL_AUTH_FACEBOOK_KEY }}
  SOCIAL_AUTH_FACEBOOK_SECRET: ${{ secrets.SOCIAL_AUTH_FACEBOOK_SECRET }}
  SOCIAL_AUTH_GITHUB_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_GITHUB_CLIENT_ID }}
  SOCIAL_AUTH_GITHUB_SECRET: ${{ secrets.SOCIAL_AUTH_GITHUB_SECRET }}
  SOCIAL_AUTH_GOOGLE_CLIENT_ID: ${{ secrets.SOCIAL_AUTH_GOOGLE_CLIENT_ID }}
  SOCIAL_AUTH_GOOGLE_SECRET: ${{ secrets.SOCIAL_AUTH_GOOGLE_SECRET }}
  SOCIAL_AUTH_TWITTER_KEY: ${{ secrets.SOCIAL_AUTH_TWITTER_KEY }}
  SOCIAL_AUTH_TWITTER_SECRET: ${{ secrets.SOCIAL_AUTH_TWITTER_SECRET }}
  SSH_AUTH_SOCK: /tmp/ssh_agent.sock
  X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}

jobs:
  push-image:
    environment: prod
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: [ django, next, webserver ]
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - includes: ./.github/actions/setup
      with:
        # Fetch entire history so we can analyze commits since last tag.
        fetch-depth: 0
        environment: prod
    - includes: ./.github/actions/build
      with:
        os: ${{ runner.os }}
        image: ${{ matrix.image }}
        push: true
        environment: prod
        tags: ghcr.io/modularhistory/${{ matrix.image }}:${{ github.sha }},ghcr.io/modularhistory/${{ matrix.image }}:latest
  
  deploy:
    needs: [push-image]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    environment: prod
    steps:
    - includes: ./.github/actions/setup
      with:
        # Fetch entire history so we can analyze commits since last tag.
        fetch-depth: 0
        environment: prod
    - name: Deploy images to server
      id: deploy-image
      env:
        DOMAIN: ${{ secrets.DOMAIN }}
        RELOAD_WEBSERVER: ${{ contains(needs.changed-files.outputs.modified-files, 'nginx.conf') }}
        SERVER_HOST: ${{ secrets.DOMAIN }}
        SERVER_TARGET: /var/www/${{ secrets.DOMAIN }}
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        SSH_PORT: ${{ secrets.SSH_PORT }}
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        echo "Adding GitHub to known hosts..."
        mkdir -p ~/.ssh
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        ssh-keyscan github.com >> ~/.ssh/known_hosts
        ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}"
        echo "Transferring files to $SERVER..."
        files_to_transport=("./.env" "./docker-compose.yml" "./docker-compose.prod.yml" "./config")
        for filepath in "${files_to_transport[@]}"; do
          mkdir -p dist/$(dirname "${filepath}")
          cp "$filepath" "dist/${filepath}"
        done
        rsync -rPv -e "ssh -p ${SSH_PORT:=22} -o 'StrictHostKeyChecking no'" dist/ jacob@${SERVER}:${SERVER_TARGET}
        echo "Starting SSH session with $SERVER..."
        ssh -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} jacob@$SERVER << 'ENDSSH'
          echo "" && echo "Renaming docker-compose.prod.yml to docker-compose.override.yml ..."
          mv docker-compose.prod.yml docker-compose.override.yml
          echo "" && echo "Setting environment variables..."
          set -a && source .env && echo "Finished setting environment variables."
          set +a; bash config/scripts/deploy.sh
        ENDSSH
    - name: Create Sentry release
      uses: getsentry/action-release@v1.1.6
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
      with:
        environment: 'prod'
