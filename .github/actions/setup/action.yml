# When composite actions support `uses` (https://github.com/actions/runner/issues/646),
# this can be converted to a composite action. In the meantime, we are using
# https://github.com/mithro/actions-includes to allow `uses`.

name: 'Setup'
description: 'Set up Python and install dependencies'
inputs:
  os:
    description: 'Operating system'
    required: false
    default: ubuntu-latest
  python-version:
    description: 'Python version'
    required: false
    default: 3.9
  fetch-depth:
    description: 'Fetch depth'
    required: false
    default: 0
  environment:
    description: 'Environment ("prod", "test", or "dev")'
    required: false
    default: 'prod'

runs:
  # https://github.com/mithro/actions-includes
  using: "includes"
  steps:
    # Check out source code.
    - name: Check out main branch
      uses: actions/checkout@v2.3.4
      with:
        fetch-depth: ${{ inputs.fetch-depth }}
    # Set up Python.
    - name: Set up Python ${{ inputs.python-version }}
      uses: actions/setup-python@v2.2.2
      with:
        python-version: ${{ inputs.python-version }}
    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info[:3]))")
    # Configure docker-compose.
    - name: Configure Docker Compose
      shell: bash
      run: |
        echo "Configuring Docker Compose..."
        if [[ -f docker-compose.${{ inputs.environment }}.yml ]]; then
          echo "Using docker-compose.${{ inputs.environment }}.yml for default overrides..."
          cp docker-compose.${{ inputs.environment }}.yml docker-compose.override.yml
        fi
        echo "Done."
    # Modify hosts file.
    - name: Add hosts to /etc/hosts
      shell: bash
      run: |
        hosts=("postgres" "redis" "elasticsearch")
        echo "Updating hosts file..."
        for host in "${hosts[@]}"; do
          sudo echo "127.0.0.1 $host" | sudo tee -a /etc/hosts
        done
        echo "Done."
    # Install PyInvoke config.
    - name: Install PyInvoke config
      run: |
        sudo cp config/invoke.yaml /etc/invoke.yaml
      shell: bash
    # Install and configure Poetry.
    - name: Install and configure Poetry
      # https://github.com/snok/install-poetry
      uses: snok/install-poetry@v1.2
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    # Load cached .venv, if it exists.
    - name: Cache Python virtual environment
      uses: actions/cache@v2
      id: venv-cache
      with:
        path: .venv
        key: venv-${{ inputs.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
    # Make sure Poetry environment is healthy.
    - name: Test poetry environment (A)
      id: venv-test
      continue-on-error: true
      if: ${{ steps.venv-cache.outputs.cache-hit == 'true' }}
      run: poetry run invoke debug
    # Install Python dependencies if necessary.
    - name: Install Python dependencies
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: |
        poetry --version
        echo "${{ inputs.os }}" | grep -i --quiet "macos" && brew install graphviz || sudo apt-get install -y graphviz graphviz-dev
        poetry install --no-root
    # Make sure Poetry environment is healthy after dependencies are installed.
    - name: Test poetry environment (B)
      if: ${{ steps.venv-cache.outputs.cache-hit != 'true' || steps.venv-test.outcome == 'failure' }}
      run: poetry run invoke debug
    # Write a .env file.
    - name: Create .env file
      run: |
        curl -sSfL https://raw.githubusercontent.com/dotenv-linter/dotenv-linter/master/install.sh | sh -s -- -b /usr/local/bin;
        poetry run invoke setup.write-dotenv-file --environment=${{ inputs.environment }}
