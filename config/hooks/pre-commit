#!/bin/bash

staged_files="$(git diff --diff-filter=AM --name-only --staged)"

echo "$staged_files" | grep --quiet ".py" && {
    staged_python_files=$(echo "$staged_files" | grep '.py')
    # Autoformat Python code.
    poetry --help &>/dev/null && [[ -d ".venv" ]] && {
        comma_delimited_filepaths=$(echo "$staged_python_files" | tr '\n' ',')
        poetry run invoke qa.autoformat --filepaths "${comma_delimited_filepaths%,}"
    }
    # Run linters on Python code.
    for file in $staged_python_files; do
        flake8 "$file";
        # https://github.com/google/pytype#usage
        pytype --output .cache/.pytype "$file" || {
            echo "
                Carefully examine the error above. Should it be fixed?
                If so, hit Ctrl-C to exit the pre-commit hook.
            "
            read -rp "Otherwise, to continue despite the error, press any key. "
        }
    done
}

# Autoformat JS & TS code.
# Match any file types that Prettier can deal with: https://prettier.io/
echo "$staged_files" | grep --quiet -e ".js" -e ".ts" -e ".jsx" -e ".tsx" -e ".scss" -e ".css" && {
    echo "Autoformatting JS/TS code..."
    cd frontend && npx lint-staged && cd ..
}

for file in $staged_files; do
    git add "$file" &>/dev/null
done

echo "Finished pre-commit tasks."
