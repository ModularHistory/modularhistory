# Generated by Django 3.1.12 on 2021-06-04 07:21

import autoslug.fields
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models

import apps.trees.fields
import core.fields
import core.fields.array_field
import core.fields.html_field
import core.fields.json_field


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('trees', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Topic',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'cache',
                    core.fields.json_field.JSONField(blank=True, default=dict, null=True),
                ),
                (
                    'slug',
                    autoslug.fields.AutoSlugField(
                        blank=True,
                        editable=True,
                        populate_from='get_slug',
                        unique=True,
                        verbose_name='slug',
                    ),
                ),
                (
                    'key',
                    models.CharField(
                        blank=True,
                        max_length=32,
                        unique=True,
                        validators=[django.core.validators.RegexValidator(regex='\\w*')],
                        verbose_name='key',
                    ),
                ),
                (
                    'path',
                    apps.trees.fields.LtreeField(default=None, editable=False, null=True),
                ),
                ('name', models.CharField(max_length=25, unique=True)),
                (
                    'aliases',
                    core.fields.array_field.ArrayField(
                        base_field=models.CharField(max_length=100),
                        blank=True,
                        null=True,
                        size=None,
                        verbose_name='aliases',
                    ),
                ),
                (
                    'description',
                    core.fields.HTMLField(
                        blank=True,
                        paragraphed=True,
                        processed=True,
                        processor=core.fields.html_field.process,
                    ),
                ),
                (
                    'parent',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='children',
                        to='topics.topic',
                        verbose_name='parent',
                    ),
                ),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TopicTopicRelation',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'from_topic',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='topics_related_to',
                        to='topics.topic',
                    ),
                ),
                (
                    'to_topic',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='topics_related_from',
                        to='topics.topic',
                    ),
                ),
            ],
            options={
                'unique_together': {('from_topic', 'to_topic')},
            },
        ),
        migrations.CreateModel(
            name='TopicParentChildRelation',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'child_topic',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='parent_relations',
                        to='topics.topic',
                    ),
                ),
                (
                    'parent_topic',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='child_relations',
                        to='topics.topic',
                    ),
                ),
            ],
            options={
                'unique_together': {('parent_topic', 'child_topic')},
            },
        ),
        migrations.AddField(
            model_name='topic',
            name='parent_topics',
            field=models.ManyToManyField(
                blank=True,
                related_name='child_topics',
                through='topics.TopicParentChildRelation',
                to='topics.Topic',
            ),
        ),
        migrations.AddField(
            model_name='topic',
            name='related_topics',
            field=models.ManyToManyField(
                blank=True,
                related_name='_topic_related_topics_+',
                through='topics.TopicTopicRelation',
                to='topics.Topic',
            ),
        ),
        migrations.RunSQL(
            """
-- Add an index to be used when the path is accessed directly.
CREATE INDEX topics_topic_path ON topics_topic USING btree(path);

-- Add an index to be used for descendants or ancestors.
CREATE INDEX topics_topic_path_gist ON topics_topic USING GIST(path);

-- Prevent a model instance from having itself as an ancestor (which would result in an infinite recursion).
ALTER TABLE topics_topic ADD CONSTRAINT check_no_recursion
    CHECK(index(path, key::text::ltree) = (nlevel(path) - 1));
"""
        ),
    ]
