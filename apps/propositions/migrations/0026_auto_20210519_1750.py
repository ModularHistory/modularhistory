# Generated by Django 3.1.9 on 2021-05-19 17:50

import autoslug.fields
import concurrency.fields
import django.db.models.deletion
from django.db import migrations, models

import apps.quotes.models.model_with_related_quotes
import apps.sources.models.model_with_sources
import core.fields
import core.fields.html_field
import core.fields.json_field
import core.fields.m2m_foreign_key


class Migration(migrations.Migration):

    dependencies = [
        ('quotes', '0044_auto_20210519_1729'),
        ('sources', '0019_auto_20210519_1729'),
        ('entities', '0026_auto_20210519_1729'),
        ('topics', '0005_auto_20210519_1729'),
        ('propositions', '0025_auto_20210519_1729'),
    ]

    operations = [
        migrations.CreateModel(
            name='TypedProposition',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('type', models.CharField(choices=[], db_index=True, max_length=255)),
                (
                    'cache',
                    core.fields.json_field.JSONField(
                        blank=True, default=dict, null=True
                    ),
                ),
                (
                    'slug',
                    autoslug.fields.AutoSlugField(
                        blank=True,
                        editable=True,
                        null=True,
                        populate_from='get_slug',
                        unique=True,
                        verbose_name='slug',
                    ),
                ),
                (
                    '_cached_tags',
                    core.fields.json_field.JSONField(default=list, editable=False),
                ),
                (
                    'verified',
                    models.BooleanField(default=False, verbose_name='verified'),
                ),
                (
                    'title',
                    models.CharField(
                        blank=True,
                        help_text='The title can be used for the detail page header and title tag, SERP result card header, etc.',
                        max_length=120,
                        null=True,
                        verbose_name='title',
                    ),
                ),
                (
                    'hidden',
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text='Hide this item from search results.',
                    ),
                ),
                (
                    '_cached_citations',
                    core.fields.json_field.JSONField(default=list, editable=False),
                ),
                (
                    'version',
                    concurrency.fields.IntegerVersionField(
                        default=0, help_text='record revision number'
                    ),
                ),
                (
                    'notes',
                    core.fields.HTMLField(
                        blank=True,
                        null=True,
                        paragraphed=True,
                        processed=False,
                        processor=None,
                        verbose_name='note',
                    ),
                ),
                (
                    'summary',
                    core.fields.HTMLField(
                        paragraphed=False,
                        processed=False,
                        processor=None,
                        unique=True,
                        verbose_name='summary',
                    ),
                ),
                (
                    'elaboration',
                    core.fields.HTMLField(
                        null=True,
                        paragraphed=True,
                        processed=True,
                        processor=core.fields.html_field.process,
                        verbose_name='elaboration',
                    ),
                ),
                (
                    'certainty',
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, 'No credible evidence'),
                            (1, 'Some credible evidence'),
                            (2, 'A preponderance of evidence'),
                            (3, 'Beyond reasonable doubt'),
                            (4, 'Beyond any shadow of a doubt'),
                        ],
                        null=True,
                        verbose_name='certainty',
                    ),
                ),
                (
                    'premises',
                    models.ManyToManyField(
                        related_name='conclusions',
                        through='propositions.Support',
                        to='propositions.TypedProposition',
                        verbose_name='premises',
                    ),
                ),
                (
                    'related_entities',
                    models.ManyToManyField(
                        blank=True,
                        related_name='typedproposition_set',
                        to='entities.Entity',
                        verbose_name='related entities',
                    ),
                ),
                (
                    'related_quotes',
                    apps.quotes.models.model_with_related_quotes.RelatedQuotesField(
                        blank=True,
                        related_name='new_propositions',
                        through='propositions.QuoteRelation',
                        to='quotes.Quote',
                        verbose_name='related quotes',
                    ),
                ),
                (
                    'sources',
                    apps.sources.models.model_with_sources.SourcesField(
                        blank=True,
                        related_name='new_propositions',
                        through='propositions.Citation',
                        to='sources.Source',
                        verbose_name='sources',
                    ),
                ),
                (
                    'tags',
                    models.ManyToManyField(
                        blank=True,
                        related_name='typedproposition_set',
                        to='topics.Topic',
                        verbose_name='tags',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='citation',
            name='new_content_object',
            field=core.fields.m2m_foreign_key.ManyToManyForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='new_citations',
                to='propositions.typedproposition',
                verbose_name='proposition',
            ),
        ),
        migrations.AddField(
            model_name='quoterelation',
            name='new_content_object',
            field=core.fields.m2m_foreign_key.ManyToManyForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='new_quote_relations',
                to='propositions.typedproposition',
                verbose_name='proposition',
            ),
        ),
        migrations.AddField(
            model_name='support',
            name='new_conclusion',
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='conclusion_supports',
                to='propositions.typedproposition',
            ),
        ),
        migrations.AddField(
            model_name='support',
            name='new_premise',
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='supports',
                to='propositions.typedproposition',
            ),
        ),
    ]
