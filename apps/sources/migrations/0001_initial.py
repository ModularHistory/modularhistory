# Generated by Django 3.1.12 on 2021-06-04 07:21

import functools

import autoslug.fields
import django.db.models.deletion
from django.db import migrations, models

import apps.dates.fields
import core.fields
import core.fields.file_field
import core.fields.html_field
import core.fields.json_field


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('entities', '0002_auto_20210604_0731'),
        ('places', '0001_initial'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Collection',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'cache',
                    core.fields.json_field.JSONField(blank=True, default=dict, null=True),
                ),
                (
                    'name',
                    models.CharField(
                        blank=True, help_text='e.g., "Adam S. Bennion papers"', max_length=100
                    ),
                ),
                ('url', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'type',
                    models.CharField(
                        choices=[
                            ('sources.journal', 'journal'),
                            ('sources.magazine', 'magazine'),
                            ('sources.newspaper', 'newspaper'),
                        ],
                        db_index=True,
                        max_length=255,
                    ),
                ),
                (
                    'name',
                    models.CharField(
                        blank=True, max_length=100, unique=True, verbose_name='name'
                    ),
                ),
                (
                    'aliases',
                    models.CharField(blank=True, max_length=100, verbose_name='aliases'),
                ),
                (
                    'description',
                    core.fields.HTMLField(
                        blank=True,
                        paragraphed=True,
                        processed=True,
                        processor=core.fields.html_field.process,
                        verbose_name='description',
                    ),
                ),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Repository',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'cache',
                    core.fields.json_field.JSONField(blank=True, default=dict, null=True),
                ),
                (
                    'name',
                    models.CharField(
                        blank=True,
                        help_text='e.g., "L. Tom Perry Special Collections"',
                        max_length=100,
                    ),
                ),
                (
                    'owner',
                    models.CharField(
                        blank=True,
                        help_text='e.g., "Harold B. Lee Library, Brigham Young University"',
                        max_length=100,
                    ),
                ),
            ],
            options={
                'verbose_name_plural': 'Repositories',
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'cache',
                    core.fields.json_field.JSONField(blank=True, default=dict, null=True),
                ),
                (
                    'slug',
                    autoslug.fields.AutoSlugField(
                        blank=True,
                        editable=True,
                        populate_from='get_slug',
                        unique=True,
                        verbose_name='slug',
                    ),
                ),
                (
                    'date',
                    apps.dates.fields.HistoricDateTimeField(
                        blank=True, null=True, verbose_name='date'
                    ),
                ),
                (
                    'end_date',
                    apps.dates.fields.HistoricDateTimeField(
                        blank=True, null=True, verbose_name='end date'
                    ),
                ),
                (
                    'date_is_circa',
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text='whether the date is estimated/imprecise',
                        verbose_name='date is circa',
                    ),
                ),
                (
                    'date_string',
                    models.CharField(
                        blank=True,
                        editable=False,
                        max_length=100,
                        null=True,
                        verbose_name='date string',
                    ),
                ),
                ('verified', models.BooleanField(default=False, verbose_name='verified')),
                (
                    'hidden',
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text='Hide this item from search results.',
                    ),
                ),
                (
                    'content',
                    core.fields.HTMLField(
                        blank=True,
                        help_text='Enter the content of the source (with ellipses as needed).',
                        paragraphed=None,
                        processed=True,
                        processor=core.fields.html_field.process,
                        verbose_name='content',
                    ),
                ),
                (
                    'attributee_html',
                    models.CharField(
                        blank=True, max_length=300, verbose_name='attributee HTML'
                    ),
                ),
                (
                    'attributee_string',
                    models.CharField(
                        blank=True, max_length=100, verbose_name='attributee string'
                    ),
                ),
                ('title', models.CharField(blank=True, max_length=250, verbose_name='title')),
                (
                    'url',
                    models.URLField(
                        blank=True,
                        help_text='URL where the source can be accessed online (outside ModularHistory)',
                        max_length=100,
                        null=True,
                        verbose_name='URL',
                    ),
                ),
                (
                    'href',
                    models.URLField(
                        blank=True,
                        help_text='URL to use as the href when presenting a link to the source. This could be the URL of the source file (if one exists) or of a webpage.',
                        null=True,
                        verbose_name='href',
                    ),
                ),
                ('citation_html', models.TextField(blank=True, verbose_name='citation HTML')),
                (
                    'citation_string',
                    models.CharField(
                        blank=True,
                        max_length=500,
                        unique=True,
                        verbose_name='citation string',
                    ),
                ),
                (
                    'containment_html',
                    models.TextField(blank=True, verbose_name='containment HTML'),
                ),
                (
                    'publication_date',
                    apps.dates.fields.HistoricDateTimeField(
                        blank=True, null=True, verbose_name='publication date'
                    ),
                ),
                (
                    'variant_type',
                    models.PositiveSmallIntegerField(
                        choices=[(0, 'Original'), (1, 'Translation'), (2, 'Transcription')],
                        db_index=True,
                        default=0,
                        verbose_name='variant type',
                    ),
                ),
                (
                    'description',
                    core.fields.HTMLField(
                        blank=True,
                        paragraphed=True,
                        processed=True,
                        processor=core.fields.html_field.process,
                        verbose_name='description',
                    ),
                ),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='SourceFile',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'file',
                    core.fields.file_field.SourceFileField(
                        blank=True,
                        null=True,
                        unique=True,
                        upload_to=functools.partial(
                            core.fields.file_field._generate_upload_path,
                            *(),
                            **{'path': 'sources/'}
                        ),
                    ),
                ),
                ('name', models.CharField(blank=True, max_length=100, unique=True)),
                (
                    'page_offset',
                    models.SmallIntegerField(
                        blank=True,
                        default=0,
                        help_text='The difference between the page numbers displayed on the pages and the actual page numbers of the electronic file (a positive number if the electronic page number is greater than the textualpage number; a negative number if the textual page number is greater than the electronic page number).',
                    ),
                ),
                (
                    'first_page_number',
                    models.SmallIntegerField(
                        blank=True,
                        default=1,
                        help_text='The page number that is visibly displayed on the page on which the relevant text begins (usually 1).',
                    ),
                ),
                ('uploaded_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Website',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'name',
                    models.CharField(
                        blank=True, max_length=100, unique=True, verbose_name='name'
                    ),
                ),
                (
                    'aliases',
                    models.CharField(blank=True, max_length=100, verbose_name='aliases'),
                ),
                (
                    'description',
                    core.fields.HTMLField(
                        blank=True,
                        paragraphed=True,
                        processed=True,
                        processor=core.fields.html_field.process,
                        verbose_name='description',
                    ),
                ),
                ('owner', models.CharField(blank=True, max_length=100, verbose_name='owner')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Affidavit',
            fields=[
                (
                    'source_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='sources.source',
                    ),
                ),
                ('editors', models.CharField(blank=True, max_length=100)),
                (
                    'original_publication_date',
                    apps.dates.fields.HistoricDateTimeField(blank=True, null=True),
                ),
                ('page_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('end_page_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                (
                    'collection_number',
                    models.PositiveSmallIntegerField(
                        blank=True, help_text='aka acquisition number', null=True
                    ),
                ),
                (
                    'location_info',
                    models.TextField(
                        blank=True,
                        help_text='Ex: John Alexander Papers, Series 1: Correspondence, 1831-1848, Folder 1',
                    ),
                ),
                (
                    'descriptive_phrase',
                    models.CharField(
                        blank=True,
                        help_text='e.g., "on such-and-such letterhead" or "signed by so-and-so"',
                        max_length=100,
                    ),
                ),
                (
                    'information_url',
                    models.URLField(
                        blank=True,
                        help_text='URL for information regarding the document',
                        null=True,
                    ),
                ),
                ('certifier', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('sources.source', models.Model),
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                (
                    'source_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='sources.source',
                    ),
                ),
                ('editors', models.CharField(blank=True, max_length=100)),
                (
                    'original_publication_date',
                    apps.dates.fields.HistoricDateTimeField(blank=True, null=True),
                ),
                ('page_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('end_page_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('volume', models.PositiveSmallIntegerField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('sources.source', models.Model),
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                (
                    'source_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='sources.source',
                    ),
                ),
                ('editors', models.CharField(blank=True, max_length=100)),
                (
                    'original_publication_date',
                    apps.dates.fields.HistoricDateTimeField(blank=True, null=True),
                ),
                ('translator', models.CharField(blank=True, max_length=100)),
                ('publisher', models.CharField(blank=True, max_length=100)),
                ('edition_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('edition_year', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('printing_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('volume_number', models.PositiveSmallIntegerField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('sources.source', models.Model),
        ),
        migrations.CreateModel(
            name='Correspondence',
            fields=[
                (
                    'source_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='sources.source',
                    ),
                ),
                ('editors', models.CharField(blank=True, max_length=100)),
                (
                    'original_publication_date',
                    apps.dates.fields.HistoricDateTimeField(blank=True, null=True),
                ),
                ('page_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('end_page_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                (
                    'collection_number',
                    models.PositiveSmallIntegerField(
                        blank=True, help_text='aka acquisition number', null=True
                    ),
                ),
                (
                    'location_info',
                    models.TextField(
                        blank=True,
                        help_text='Ex: John Alexander Papers, Series 1: Correspondence, 1831-1848, Folder 1',
                    ),
                ),
                (
                    'descriptive_phrase',
                    models.CharField(
                        blank=True,
                        help_text='e.g., "on such-and-such letterhead" or "signed by so-and-so"',
                        max_length=100,
                    ),
                ),
                (
                    'information_url',
                    models.URLField(
                        blank=True,
                        help_text='URL for information regarding the document',
                        null=True,
                    ),
                ),
                (
                    'type',
                    models.CharField(
                        choices=[
                            ('correspondence', 'correspondence'),
                            ('email', 'email'),
                            ('letter', 'letter'),
                            ('memorandum', 'memorandum'),
                        ],
                        default='correspondence',
                        max_length=14,
                        verbose_name='image type',
                    ),
                ),
                ('recipient', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('sources.source', models.Model),
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                (
                    'source_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='sources.source',
                    ),
                ),
                ('editors', models.CharField(blank=True, max_length=100)),
                (
                    'original_publication_date',
                    apps.dates.fields.HistoricDateTimeField(blank=True, null=True),
                ),
                ('page_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('end_page_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                (
                    'collection_number',
                    models.PositiveSmallIntegerField(
                        blank=True, help_text='aka acquisition number', null=True
                    ),
                ),
                (
                    'location_info',
                    models.TextField(
                        blank=True,
                        help_text='Ex: John Alexander Papers, Series 1: Correspondence, 1831-1848, Folder 1',
                    ),
                ),
                (
                    'descriptive_phrase',
                    models.CharField(
                        blank=True,
                        help_text='e.g., "on such-and-such letterhead" or "signed by so-and-so"',
                        max_length=100,
                    ),
                ),
                (
                    'information_url',
                    models.URLField(
                        blank=True,
                        help_text='URL for information regarding the document',
                        null=True,
                    ),
                ),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('sources.source', models.Model),
        ),
        migrations.CreateModel(
            name='Entry',
            fields=[
                (
                    'source_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='sources.source',
                    ),
                ),
                ('editors', models.CharField(blank=True, max_length=100)),
                (
                    'original_publication_date',
                    apps.dates.fields.HistoricDateTimeField(blank=True, null=True),
                ),
                ('page_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('end_page_number', models.PositiveSmallIntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'journal entries',
            },
            bases=('sources.source', models.Model),
        ),
        migrations.CreateModel(
            name='Film',
            fields=[
                (
                    'source_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='sources.source',
                    ),
                ),
                (
                    'type',
                    models.CharField(
                        choices=[('documentary', 'Documentary')],
                        default='documentary',
                        max_length=12,
                        verbose_name='film type',
                    ),
                ),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('sources.source',),
        ),
        migrations.CreateModel(
            name='Interview',
            fields=[
                (
                    'source_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='sources.source',
                    ),
                ),
                (
                    'interviewers',
                    models.CharField(blank=True, max_length=200, verbose_name='interviewers'),
                ),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('sources.source',),
        ),
        migrations.CreateModel(
            name='Piece',
            fields=[
                (
                    'source_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='sources.source',
                    ),
                ),
                ('editors', models.CharField(blank=True, max_length=100)),
                (
                    'original_publication_date',
                    apps.dates.fields.HistoricDateTimeField(blank=True, null=True),
                ),
                ('page_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('end_page_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                (
                    'type',
                    models.CharField(
                        choices=[('essay', 'Essay')],
                        default='essay',
                        max_length=10,
                        verbose_name='piece type',
                    ),
                ),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('sources.source', models.Model),
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                (
                    'source_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='sources.source',
                    ),
                ),
                (
                    'type',
                    models.CharField(
                        choices=[('chapter', 'Chapter'), ('section', 'Section')],
                        default='chapter',
                        max_length=10,
                        verbose_name='section type',
                    ),
                ),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('sources.source',),
        ),
        migrations.CreateModel(
            name='Speech',
            fields=[
                (
                    'source_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='sources.source',
                    ),
                ),
                (
                    'type',
                    models.CharField(
                        choices=[
                            ('speech', 'Speech'),
                            ('address', 'Address'),
                            ('discourse', 'Discourse'),
                            ('lecture', 'Lecture'),
                            ('sermon', 'Sermon'),
                            ('statement', 'Statement'),
                        ],
                        default='speech',
                        max_length=10,
                        verbose_name='speech type',
                    ),
                ),
                ('audience', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('sources.source',),
        ),
        migrations.CreateModel(
            name='Webpage',
            fields=[
                (
                    'source_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='sources.source',
                    ),
                ),
                ('editors', models.CharField(blank=True, max_length=100)),
                (
                    'original_publication_date',
                    apps.dates.fields.HistoricDateTimeField(blank=True, null=True),
                ),
                ('website_name', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('sources.source', models.Model),
        ),
        migrations.CreateModel(
            name='SourceContainment',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'position',
                    models.PositiveSmallIntegerField(blank=True, default=0, null=True),
                ),
                ('page_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('end_page_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                (
                    'phrase',
                    models.CharField(
                        blank=True,
                        choices=[
                            (None, '-------'),
                            ('archived', 'archived in'),
                            ('cited', 'cited in'),
                            ('copy', 'copy in'),
                            ('included', 'as included in'),
                            ('quoted', 'quoted in'),
                            ('recorded', 'recorded in'),
                            ('reproduced', 'reproduced in'),
                            ('transcribed', 'transcribed in'),
                        ],
                        default='',
                        max_length=12,
                    ),
                ),
                (
                    'container',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='container_containments',
                        to='sources.source',
                    ),
                ),
                (
                    'source',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='source_containments',
                        to='sources.source',
                    ),
                ),
            ],
            options={
                'ordering': ['position', 'source'],
            },
        ),
        migrations.CreateModel(
            name='SourceAttribution',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'position',
                    models.PositiveSmallIntegerField(blank=True, default=0, null=True),
                ),
                (
                    'attributee',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='source_attributions',
                        to='entities.entity',
                    ),
                ),
                (
                    'source',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='attributions',
                        to='sources.source',
                        verbose_name='source',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='source',
            name='attributees',
            field=models.ManyToManyField(
                blank=True,
                related_name='attributed_sources',
                through='sources.SourceAttribution',
                to='entities.Entity',
                verbose_name='attributees',
            ),
        ),
        migrations.AddField(
            model_name='source',
            name='containers',
            field=models.ManyToManyField(
                blank=True,
                related_name='contained_sources',
                through='sources.SourceContainment',
                to='sources.Source',
                verbose_name='containers',
            ),
        ),
        migrations.AddField(
            model_name='source',
            name='file',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='sources',
                to='sources.sourcefile',
                verbose_name='file',
            ),
        ),
        migrations.AddField(
            model_name='source',
            name='location',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to='places.place',
                verbose_name='location',
            ),
        ),
        migrations.AddField(
            model_name='source',
            name='original',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='versions',
                to='sources.source',
                verbose_name='original',
            ),
        ),
        migrations.AddField(
            model_name='source',
            name='polymorphic_ctype',
            field=models.ForeignKey(
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='polymorphic_sources.source_set+',
                to='contenttypes.contenttype',
            ),
        ),
        migrations.AddField(
            model_name='source',
            name='related_entities',
            field=models.ManyToManyField(
                blank=True,
                related_name='source_set',
                to='entities.Entity',
                verbose_name='related entities',
            ),
        ),
    ]
