# Generated by Django 3.1.9 on 2021-05-20 20:08

import functools

import autoslug.fields
import image_cropping.fields
from django.db import migrations, models

import apps.dates.fields
import core.fields
import core.fields.file_field
import core.fields.html_field
import core.fields.json_field


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('topics', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Video',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'cache',
                    core.fields.json_field.JSONField(
                        blank=True, default=dict, null=True
                    ),
                ),
                (
                    'slug',
                    autoslug.fields.AutoSlugField(
                        blank=True,
                        editable=True,
                        null=True,
                        populate_from='get_slug',
                        unique=True,
                        verbose_name='slug',
                    ),
                ),
                (
                    'date_is_circa',
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text='whether the date is estimated/imprecise',
                        verbose_name='date is circa',
                    ),
                ),
                (
                    'date',
                    apps.dates.fields.HistoricDateTimeField(
                        null=True, verbose_name='date'
                    ),
                ),
                (
                    'end_date',
                    apps.dates.fields.HistoricDateTimeField(
                        blank=True, null=True, verbose_name='end date'
                    ),
                ),
                (
                    'verified',
                    models.BooleanField(default=False, verbose_name='verified'),
                ),
                (
                    'hidden',
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text='Hide this item from search results.',
                    ),
                ),
                (
                    'caption',
                    core.fields.HTMLField(
                        blank=True,
                        null=True,
                        paragraphed=False,
                        processed=True,
                        processor=core.fields.html_field.process,
                    ),
                ),
                (
                    'description',
                    core.fields.HTMLField(
                        blank=True,
                        null=True,
                        paragraphed=None,
                        processed=True,
                        processor=core.fields.html_field.process,
                    ),
                ),
                ('provider', models.CharField(blank=True, max_length=200, null=True)),
                ('title', models.CharField(max_length=200, null=True)),
                ('url', models.URLField(null=True, unique=True)),
                ('embed_code', models.CharField(max_length=200, null=True)),
                ('duration', models.PositiveSmallIntegerField(blank=True, null=True)),
                (
                    'tags',
                    models.ManyToManyField(
                        blank=True,
                        related_name='video_set',
                        to='topics.Topic',
                        verbose_name='tags',
                    ),
                ),
            ],
            options={
                'unique_together': {('title', 'url')},
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'cache',
                    core.fields.json_field.JSONField(
                        blank=True, default=dict, null=True
                    ),
                ),
                (
                    'slug',
                    autoslug.fields.AutoSlugField(
                        blank=True,
                        editable=True,
                        null=True,
                        populate_from='get_slug',
                        unique=True,
                        verbose_name='slug',
                    ),
                ),
                (
                    'date_is_circa',
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text='whether the date is estimated/imprecise',
                        verbose_name='date is circa',
                    ),
                ),
                (
                    'date',
                    apps.dates.fields.HistoricDateTimeField(
                        null=True, verbose_name='date'
                    ),
                ),
                (
                    'end_date',
                    apps.dates.fields.HistoricDateTimeField(
                        blank=True, null=True, verbose_name='end date'
                    ),
                ),
                (
                    'verified',
                    models.BooleanField(default=False, verbose_name='verified'),
                ),
                (
                    'title',
                    models.CharField(
                        blank=True,
                        help_text='The title can be used for the detail page header and title tag, SERP result card header, etc.',
                        max_length=120,
                        null=True,
                        verbose_name='title',
                    ),
                ),
                (
                    'hidden',
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text='Hide this item from search results.',
                    ),
                ),
                (
                    'caption',
                    core.fields.HTMLField(
                        blank=True,
                        null=True,
                        paragraphed=False,
                        processed=True,
                        processor=core.fields.html_field.process,
                    ),
                ),
                (
                    'description',
                    core.fields.HTMLField(
                        blank=True,
                        null=True,
                        paragraphed=None,
                        processed=True,
                        processor=core.fields.html_field.process,
                    ),
                ),
                ('provider', models.CharField(blank=True, max_length=200, null=True)),
                (
                    'image',
                    models.ImageField(
                        height_field='height',
                        null=True,
                        upload_to=functools.partial(
                            core.fields.file_field._generate_upload_path,
                            *(),
                            **{'path': 'images/'}
                        ),
                        verbose_name='image',
                        width_field='width',
                    ),
                ),
                (
                    'image_type',
                    models.CharField(
                        choices=[
                            ('image', 'Image'),
                            ('photo', 'Photo'),
                            ('illustration', 'Illustration'),
                            ('painting', 'Painting'),
                            ('portrait', 'Portrait'),
                            ('diagram', 'Diagram'),
                            ('reconstruction', 'Reconstruction'),
                            ('photomontage', 'Photomontage'),
                            ('model', 'Model'),
                        ],
                        default='image',
                        max_length=14,
                        verbose_name='image type',
                    ),
                ),
                ('urls', core.fields.json_field.JSONField(blank=True, default=dict)),
                (
                    'width',
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name='width'
                    ),
                ),
                (
                    'height',
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name='height'
                    ),
                ),
                (
                    'cropping',
                    image_cropping.fields.ImageRatioField(
                        'image',
                        '0x0',
                        adapt_rotation=False,
                        allow_fullsize=True,
                        free_crop=True,
                        help_text='Not yet fully implemented.',
                        hide_image_field=False,
                        size_warning=False,
                        verbose_name='cropping',
                    ),
                ),
                (
                    'tags',
                    models.ManyToManyField(
                        blank=True,
                        related_name='image_set',
                        to='topics.Topic',
                        verbose_name='tags',
                    ),
                ),
            ],
            options={
                'ordering': ['date'],
                'unique_together': {('image', 'caption')},
            },
        ),
    ]
