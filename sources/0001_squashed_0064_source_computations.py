# Generated by Django 3.1.2 on 2020-10-16 01:37

from django.db import migrations, models
import django.db.models.deletion
import functools
import gm2m.fields
import modularhistory.fields
import modularhistory.fields.file_field
import modularhistory.fields.historic_datetime_field
import modularhistory.fields.json_field
import uuid


class RenameModelAndBaseOperation(migrations.RenameModel):

    def __init__(self, old_name, new_name):
        super(RenameModelAndBaseOperation, self).__init__(old_name, new_name)

    def state_forwards(self, app_label, state):
        old_remote_model = '%s.%s' % (app_label, self.old_name_lower)
        new_remote_model = '%s.%s' % (app_label, self.new_name_lower)
        to_reload = []
        # change all bases affected by rename
        for (model_app_label, model_name), model_state in state.models.items():
            if old_remote_model in model_state.bases:
                new_bases_tuple = tuple(
                    new_remote_model if base == old_remote_model else base
                    for base in model_state.bases
                )
                state.models[model_app_label, model_name].bases = new_bases_tuple
                to_reload.append((model_app_label, model_name))
        super(RenameModelAndBaseOperation, self).state_forwards(app_label, state)
        state.reload_models(to_reload, delay=True)


class Migration(migrations.Migration):

    replaces = [
        ('sources', '0001_initial'),
        ('sources', '0002_pagerange'),
        ('sources', '0003_auto_20200503_0704'),
        ('sources', '0004_auto_20200503_0707'),
        ('sources', '0005_auto_20200503_0841'),
        ('sources', '0006_auto_20200503_0854'),
        ('sources', '0007_auto_20200503_0912'),
        ('sources', '0008_auto_20200915_0511'),
        ('sources', '0009_auto_20200916_0607'),
        ('sources', '0010_auto_20200917_0237'),
        ('sources', '0011_auto_20200917_0506'),
        ('sources', '0012_auto_20200917_0511'),
        ('sources', '0013_auto_20200917_0520'),
        ('sources', '0014_auto_20200917_0523'),
        ('sources', '0015_auto_20200917_0531'),
        ('sources', '0016_auto_20200917_0824'),
        ('sources', '0017_auto_20200917_1445'),
        ('sources', '0018_auto_20200921_0816'),
        ('sources', '0019_auto_20200921_1255'),
        ('sources', '0020_auto_20200921_1301'),
        ('sources', '0021_auto_20200921_1313'),
        ('sources', '0022_auto_20200921_1331'),
        ('sources', '0023_auto_20200923_0100'),
        ('sources', '0024_auto_20200923_0450'),
        ('sources', '0025_auto_20200923_0503'),
        ('sources', '0026_auto_20200923_0522'),
        ('sources', '0027_auto_20200923_0527'),
        ('sources', '0028_auto_20200923_0535'),
        ('sources', '0029_auto_20200923_0539'),
        ('sources', '0030_auto_20200923_0543'),
        ('sources', '0031_auto_20200923_0550'),
        ('sources', '0032_auto_20200923_0553'),
        ('sources', '0033_auto_20200923_0557'),
        ('sources', '0034_auto_20200923_0559'),
        ('sources', '0035_auto_20200923_0605'),
        ('sources', '0036_auto_20200923_0608'),
        ('sources', '0037_auto_20200923_0609'),
        ('sources', '0038_auto_20200923_0612'),
        ('sources', '0039_auto_20200923_0615'),
        ('sources', '0040_auto_20200923_1351'),
        ('sources', '0041_auto_20200923_1400'),
        ('sources', '0042_auto_20200924_0047'),
        ('sources', '0043_auto_20200924_0049'),
        ('sources', '0044_auto_20200924_0050'),
        ('sources', '0045_remove_typedsource_old_source'),
        ('sources', '0046_source_new_source'),
        ('sources', '0047_auto_20200926_1024'),
        ('sources', '0048_auto_20200926_1052'),
        ('sources', '0049_auto_20200926_1151'),
        ('sources', '0050_auto_20200927_0617'),
        ('sources', '0051_auto_20200928_1332'),
        ('sources', '0052_auto_20200928_2312'),
        ('sources', '0053_auto_20200929_0108'),
        ('sources', '0054_auto_20200929_0138'),
        ('sources', '0055_remove_source_polymorphic_ctype'),
        ('sources', '0056_auto_20200929_0145'),
        ('sources', '0057_auto_20200929_0223'),
        ('sources', '0058_auto_20200929_0350'),
        ('sources', '0059_auto_20200929_0410'),
        ('sources', '0060_auto_20200929_0416'),
        ('sources', '0061_auto_20200929_0515'),
        ('sources', '0062_auto_20200929_0616'),
        ('sources', '0063_auto_20201001_0757'),
        ('sources', '0064_source_computations')
    ]

    initial = True

    dependencies = [
        ('entities', '0012_auto_20200909_0442'),
        ('places', '0002_auto_20200909_0442'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('places', '0001_initial'),
        ('entities', '0007_auto_20200407_0910'),
    ]

    operations = [
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('aliases', models.CharField(blank=True, max_length=100, null=True)),
                ('description', modularhistory.fields.HTMLField(blank=True, null=True)),
                ('type', models.CharField(choices=[('sources.journal', 'journal'), ('sources.magazine', 'magazine'), ('sources.newspaper', 'newspaper')], db_index=True, default='sources.journal', max_length=255)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_is_circa', models.BooleanField(blank=True, default=False)),
                ('verified', models.BooleanField(blank=True, default=False)),
                ('hidden', models.BooleanField(blank=True, default=False, help_text="Don't let this item appear in search results.")),
                ('key', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('db_string', models.CharField(blank=True, max_length=500, unique=True, verbose_name='database string')),
                ('url', models.URLField(blank=True, max_length=100, null=True)),
                ('description', modularhistory.fields.HTMLField(blank=True, null=True)),
                ('date', modularhistory.fields.historic_datetime_field.HistoricDateTimeField(blank=True, null=True)),
                ('publication_date', modularhistory.fields.historic_datetime_field.HistoricDateTimeField(blank=True, null=True)),
                ('creators', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'ordering': ['creators', '-date'],
            },
        ),
        migrations.CreateModel(
            name='SourceFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', modularhistory.fields.file_field.SourceFileField(blank=True, null=True, unique=True, upload_to=functools.partial(modularhistory.fields.file_field._generate_upload_path, *(), **{'path': 'sources/'}))),
                ('name', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('page_offset', models.SmallIntegerField(blank=True, default=0, help_text='The difference between the page numbers displayed on the pages and the actual page numbers of the electronic file (a positive number if the electronic page number is greater than the textualpage number; a negative number if the textual page number is greater than the electronic page number).')),
                ('first_page_number', models.SmallIntegerField(blank=True, default=1, help_text='The page number that is visibly displayed on the page on which the relevant text begins (usually 1).')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='OldInterview',
            fields=[
                ('interviewers', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('sources.source',),
        ),
        migrations.CreateModel(
            name='OldJournalEntry',
            fields=[
                ('editors', models.CharField(blank=True, max_length=100, null=True)),
                ('page_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('end_page_number', models.PositiveSmallIntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Journal entries',
            },
            bases=('sources.source',),
        ),
        migrations.CreateModel(
            name='SourceContainment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('end_page_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('position', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('phrase', models.CharField(blank=True, choices=[('', '-----'), ('archived', 'archived'), ('cited', 'cited'), ('copy', 'copy'), ('quoted', 'quoted'), ('recorded', 'recorded'), ('reproduced', 'reproduced'), ('transcribed', 'transcribed')], default='', max_length=12)),
                ('container', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='container_containments', to='sources.source')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='source_containments', to='sources.source')),
            ],
            options={
                'ordering': ['position', 'source'],
            },
        ),
        migrations.AddField(
            model_name='source',
            name='containers',
            field=models.ManyToManyField(blank=True, related_name='contained_sources', through='sources.SourceContainment', to='sources.Source'),
        ),
        migrations.AddField(
            model_name='source',
            name='db_file',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sources', to='sources.sourcefile', verbose_name='file'),
        ),
        migrations.AddField(
            model_name='source',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='publications', to='places.place'),
        ),
        migrations.AddField(
            model_name='source',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_sources.source_set+', to='contenttypes.contenttype'),
        ),
        migrations.CreateModel(
            name='Repository',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='e.g., "L. Tom Perry Special Collections"', max_length=100, null=True)),
                ('owner', models.CharField(blank=True, help_text='e.g., "Harold B. Lee Library, Brigham Young University"', max_length=100, null=True)),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='repositories', to='places.place')),
            ],
            options={
                'verbose_name_plural': 'Repositories',
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='e.g., "Adam S. Bennion papers"', max_length=100, null=True)),
                ('url', models.URLField(blank=True, max_length=100, null=True)),
                ('repository', models.ForeignKey(help_text='the collecting institution', on_delete=django.db.models.deletion.CASCADE, to='sources.repository')),
            ],
            options={
                'unique_together': {('name', 'repository')},
            },
        ),
        migrations.CreateModel(
            name='OldLetter',
            fields=[
                ('editors', models.CharField(blank=True, max_length=100, null=True)),
                ('descriptive_phrase', models.CharField(blank=True, help_text='e.g., "on such-and-such letterhead" or "signed by so-and-so"', max_length=100, null=True)),
                ('collection_number', models.PositiveSmallIntegerField(blank=True, help_text='aka acquisition number', null=True)),
                ('location_info', models.CharField(blank=True, help_text='Ex: John H. Alexander Papers, Series 1: Correspondence, 1831-1848, Folder 1', max_length=400, null=True)),
                ('information_url', models.URLField(blank=True, help_text='URL for information regarding the document', max_length=100, null=True)),
                ('recipient', models.CharField(blank=True, max_length=100, null=True)),
                ('type2', models.CharField(choices=[('email', 'email'), ('letter', 'letter'), ('memorandum', 'memorandum')], default='letter', max_length=10)),
            ],
            options={
                'verbose_name': 'correspondence',
                'verbose_name_plural': 'correspondence',
            },
            bases=('sources.source', models.Model),
        ),
        migrations.CreateModel(
            name='OldAffidavit',
            fields=[
                ('source_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sources.source')),
                ('editors', models.CharField(blank=True, max_length=100, null=True)),
                ('descriptive_phrase', models.CharField(blank=True, help_text='e.g., "on such-and-such letterhead" or "signed by so-and-so"', max_length=100, null=True)),
                ('collection_number', models.PositiveSmallIntegerField(blank=True, help_text='aka acquisition number', null=True)),
                ('location_info', models.CharField(blank=True, help_text='Ex: John H. Alexander Papers, Series 1: Correspondence, 1831-1848, Folder 1', max_length=400, null=True)),
                ('information_url', models.URLField(blank=True, help_text='URL for information regarding the document', max_length=100, null=True)),
                ('certifier', models.CharField(blank=True, max_length=100, null=True)),
                ('collection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='oldaffidavit', to='sources.collection')),
            ],
            options={
                'abstract': False,
            },
            bases=('sources.source', models.Model),
        ),
        migrations.CreateModel(
            name='Citation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('citation_phrase', models.CharField(blank=True, choices=[(None, ''), ('quoted in', 'quoted in'), ('cited in', 'cited in'), ('partially reproduced in', 'partially reproduced in')], default=None, max_length=25, null=True)),
                ('object_id', models.PositiveIntegerField()),
                ('position', models.PositiveSmallIntegerField(blank=True, help_text='Determines the order of references.', null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('source', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='citations', to='sources.source')),
            ],
            options={
                'ordering': ['position', 'source'],
                'unique_together': {('source', 'content_type', 'object_id', 'position')},
            },
        ),
        migrations.CreateModel(
            name='PageRange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page_number', models.PositiveSmallIntegerField(default=0)),
                ('end_page_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('citation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pages', to='sources.citation')),
            ],
            options={
                'abstract': False,
                'ordering': ['page_number'],
                'unique_together': {('citation', 'page_number')},
            },
        ),
        migrations.CreateModel(
            name='OldBook',
            fields=[
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('editors', models.CharField(blank=True, max_length=100, null=True)),
                ('translator', models.CharField(blank=True, max_length=100, null=True)),
                ('publisher', models.CharField(blank=True, max_length=100, null=True)),
                ('edition_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('edition_year', models.CharField(blank=True, max_length=4, null=True)),
                ('printing_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('volume_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('original_publication_date', modularhistory.fields.historic_datetime_field.HistoricDateTimeField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('sources.source', models.Model),
        ),
        migrations.CreateModel(
            name='OldChapter',
            fields=[
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('editors', models.CharField(blank=True, max_length=100, null=True)),
                ('type2', models.CharField(choices=[('chapter', 'Chapter'), ('section', 'Section')], default='chapter', max_length=7)),
            ],
            options={
                'abstract': False,
            },
            bases=('sources.source', models.Model),
        ),
        migrations.CreateModel(
            name='OldDocument',
            fields=[
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('editors', models.CharField(blank=True, max_length=100, null=True)),
                ('descriptive_phrase', models.CharField(blank=True, help_text='e.g., "on such-and-such letterhead" or "signed by so-and-so"', max_length=100, null=True)),
                ('collection_number', models.PositiveSmallIntegerField(blank=True, help_text='aka acquisition number', null=True)),
                ('location_info', models.CharField(blank=True, help_text='Ex: John H. Alexander Papers, Series 1: Correspondence, 1831-1848, Folder 1', max_length=400, null=True)),
                ('information_url', models.URLField(blank=True, help_text='URL for information regarding the document', max_length=100, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('sources.source', models.Model),
        ),
        migrations.CreateModel(
            name='OldDocumentary',
            fields=[
                ('title', models.CharField(blank=True, max_length=250, null=True)),
            ],
            options={
                'verbose_name_plural': 'Documentaries',
            },
            bases=('sources.source', models.Model),
        ),
        migrations.CreateModel(
            name='OldPiece',
            fields=[
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('editors', models.CharField(blank=True, max_length=100, null=True)),
                ('page_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('end_page_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('type2', models.CharField(choices=[('essay', 'Essay')], default='essay', max_length=10)),
            ],
            options={
                'abstract': False,
            },
            bases=('sources.source', models.Model),
        ),
        migrations.CreateModel(
            name='OldSpeech',
            fields=[
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('type2', models.CharField(choices=[('address', 'address'), ('discourse', 'discourse'), ('lecture', 'lecture'), ('sermon', 'sermon'), ('speech', 'speech'), ('statement', 'statement')], default='speech', max_length=10)),
                ('audience', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'verbose_name_plural': 'Speeches',
            },
            bases=('sources.source', models.Model),
        ),
        migrations.CreateModel(
            name='OldWebPage',
            fields=[
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('editors', models.CharField(blank=True, max_length=100, null=True)),
                ('website_title', models.CharField(blank=True, max_length=100, null=True)),
                ('organization_name', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('sources.source', models.Model),
        ),
        migrations.CreateModel(
            name='SourceAttribution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('attributee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='source_attributions', to='entities.entity')),
                ('source', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='attributions', to='sources.source')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterField(
            model_name='sourcecontainment',
            name='container',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='container_containments', to='sources.source'),
        ),
        migrations.AlterField(
            model_name='sourcecontainment',
            name='source',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='source_containments', to='sources.source'),
        ),
        migrations.CreateModel(
            name='TypedSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('sources.textualsource', 'textual source'), ('sources.sourcewithpagenumbers', 'source with page numbers'), ('sources.piece', 'piece'), ('sources.essay', 'essay'), ('sources.documentsource', 'document source'), ('sources.document', 'document'), ('sources.affidavit', 'affidavit'), ('sources.article', 'article'), ('sources.book', 'book'), ('sources.sectionsource', 'section source'), ('sources.section', 'section'), ('sources.chapter', 'chapter'), ('sources.correspondence', 'correspondence'), ('sources.email', 'email'), ('sources.letter', 'letter'), ('sources.memorandum', 'memorandum'), ('sources.spokensource', 'spoken source'), ('sources.speech', 'speech'), ('sources.address', 'address'), ('sources.discourse', 'discourse'), ('sources.lecture', 'lecture'), ('sources.sermon', 'sermon'), ('sources.statement', 'statement'), ('sources.interview', 'interview'), ('sources.journalentry', 'journal entry'), ('sources.videosource', 'video source'), ('sources.documentary', 'documentary'), ('sources.webpage', 'web page')], db_index=True, max_length=255)),
                ('db_string', models.CharField(blank=True, max_length=500, unique=True, verbose_name='database string')),
                ('url', models.URLField(blank=True, max_length=100, null=True)),
                ('description', modularhistory.fields.HTMLField(blank=True, null=True)),
                ('date', modularhistory.fields.historic_datetime_field.HistoricDateTimeField(blank=True, null=True)),
                ('publication_date', modularhistory.fields.historic_datetime_field.HistoricDateTimeField(blank=True, null=True)),
                ('creators', models.CharField(blank=True, max_length=100, null=True)),
                ('attributees', models.ManyToManyField(blank=True, through='sources.SourceAttribution', to='entities.Entity')),
                ('containers', models.ManyToManyField(blank=True, through='sources.SourceContainment', to='sources.TypedSource')),
                ('db_file', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sources.sourcefile', verbose_name='file')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='places.place')),
                ('related', gm2m.fields.GM2MField('quotes.Quote', 'occurrences.Occurrence', blank=True, through='sources.Citation', through_fields=['typed_source', 'content_object', 'content_type', 'object_id'])),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('date_is_circa', models.BooleanField(blank=True, default=False)),
                ('hidden', models.BooleanField(blank=True, default=False, help_text="Don't let this item appear in search results.")),
                ('key', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('verified', models.BooleanField(blank=True, default=False)),
                ('extra', modularhistory.fields.json_field.JSONField(blank=True, default=dict, null=True)),
                ('publication', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='sources.publication')),
                ('original_edition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subsequent_editions', to='sources.typedsource')),
                ('original_publication_date', modularhistory.fields.historic_datetime_field.HistoricDateTimeField(blank=True, null=True)),
                ('collection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='typedsource', to='sources.collection')),
            ],
            options={
                'abstract': False,
                'ordering': ['creators', '-date'],
            },
        ),
        migrations.AddField(
            model_name='citation',
            name='typed_source',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='citations', to='sources.typedsource'),
        ),
        migrations.AddField(
            model_name='sourceattribution',
            name='typed_source',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attributions', to='sources.typedsource'),
        ),
        migrations.AddField(
            model_name='sourcecontainment',
            name='typed_container',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='typed_container_containments', to='sources.typedsource'),
        ),
        migrations.AddField(
            model_name='sourcecontainment',
            name='typed_source',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='typed_source_containments', to='sources.typedsource'),
        ),
        migrations.CreateModel(
            name='TextualSource',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.typedsource',),
        ),
        migrations.CreateModel(
            name='AbstractPiece',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.textualsource',),
        ),
        migrations.CreateModel(
            name='OldArticle',
            fields=[
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('editors', models.CharField(blank=True, max_length=100, null=True)),
                ('page_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('end_page_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('volume', models.PositiveSmallIntegerField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('sources.source', models.Model),
        ),
        migrations.DeleteModel(
            name='AbstractPiece',
        ),
        migrations.CreateModel(
            name='SourceWithPageNumbers',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.textualsource',),
        ),
        migrations.CreateModel(
            name='TitledSource',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.typedsource',),
        ),
        migrations.CreateModel(
            name='Journal',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.publication',),
        ),
        migrations.CreateModel(
            name='Magazine',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.publication',),
        ),
        migrations.CreateModel(
            name='Newspaper',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.publication',),
        ),
        migrations.DeleteModel(
            name='TitledSource',
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.sourcewithpagenumbers',),
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.textualsource',),
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.textualsource',),
        ),
        migrations.CreateModel(
            name='SpokenSource',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.typedsource',),
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
            ],
            options={
                'verbose_name_plural': 'Addresses',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.spokensource',),
        ),
        migrations.CreateModel(
            name='Discourse',
            fields=[
            ],
            options={
                'verbose_name_plural': 'Discourses',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.spokensource',),
        ),
        migrations.CreateModel(
            name='Lecture',
            fields=[
            ],
            options={
                'verbose_name_plural': 'Lectures',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.spokensource',),
        ),
        migrations.CreateModel(
            name='Sermon',
            fields=[
            ],
            options={
                'verbose_name_plural': 'Sermons',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.spokensource',),
        ),
        migrations.CreateModel(
            name='Speech',
            fields=[
            ],
            options={
                'verbose_name_plural': 'Speeches',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.spokensource',),
        ),
        migrations.CreateModel(
            name='Statement',
            fields=[
            ],
            options={
                'verbose_name_plural': 'Statements',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.spokensource',),
        ),
        migrations.CreateModel(
            name='DocumentSource',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.sourcewithpagenumbers',),
        ),
        migrations.CreateModel(
            name='Correspondence',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.documentsource',),
        ),
        migrations.CreateModel(
            name='Email',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.correspondence',),
        ),
        migrations.CreateModel(
            name='Letter',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.correspondence',),
        ),
        migrations.CreateModel(
            name='Memorandum',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.correspondence',),
        ),
        migrations.CreateModel(
            name='Interview',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.spokensource',),
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.documentsource',),
        ),
        migrations.CreateModel(
            name='Piece',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.sourcewithpagenumbers',),
        ),
        migrations.CreateModel(
            name='Essay',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.piece',),
        ),
        migrations.CreateModel(
            name='Affidavit',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.documentsource',),
        ),
        migrations.CreateModel(
            name='WebPage',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.textualsource',),
        ),
        migrations.CreateModel(
            name='JournalEntry',
            fields=[
            ],
            options={
                'verbose_name_plural': 'Journal entries',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.sourcewithpagenumbers',),
        ),
        migrations.CreateModel(
            name='VideoSource',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.typedsource',),
        ),
        migrations.CreateModel(
            name='Documentary',
            fields=[
            ],
            options={
                'verbose_name_plural': 'Documentaries',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.videosource',),
        ),
        migrations.DeleteModel(
            name='Chapter',
        ),
        migrations.CreateModel(
            name='SectionSource',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.textualsource',),
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.sectionsource',),
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.sectionsource',),
        ),
        migrations.DeleteModel(
            name='Chapter',
        ),
        migrations.DeleteModel(
            name='Section',
        ),
        migrations.DeleteModel(
            name='SectionSource',
        ),
        migrations.DeleteModel(
            name='Book',
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.textualsource',),
        ),
        migrations.CreateModel(
            name='SectionSource',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.textualsource',),
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.sectionsource',),
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sources.sectionsource',),
        ),
        migrations.AddField(
            model_name='source',
            name='new_source',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='old_source', to='sources.typedsource'),
        ),
        migrations.AlterModelOptions(
            name='citation',
            options={'ordering': ['position', 'old_source']},
        ),
        migrations.RenameField(
            model_name='citation',
            old_name='source',
            new_name='old_source',
        ),
        migrations.AlterUniqueTogether(
            name='citation',
            unique_together={('old_source', 'content_type', 'object_id', 'position')},
        ),
        migrations.RenameField(
            model_name='citation',
            old_name='typed_source',
            new_name='source',
        ),
        migrations.AlterField(
            model_name='typedsource',
            name='related',
            field=gm2m.fields.GM2MField(
                'quotes.Quote',
                'occurrences.Occurrence',
                blank=True,
                through='sources.Citation',
                through_fields=['source', 'content_object', 'content_type', 'object_id']
            ),
        ),
        migrations.AlterModelOptions(
            name='citation',
            options={'ordering': ['position', 'source']},
        ),
        migrations.RemoveField(
            model_name='source',
            name='description',
        ),
        migrations.RemoveField(
            model_name='source',
            name='publication_date',
        ),
        migrations.RemoveField(
            model_name='source',
            name='url',
        ),
        migrations.AlterField(
            model_name='typedsource',
            name='related',
            field=gm2m.fields.GM2MField(
                'quotes.Quote',
                'occurrences.Occurrence',
                blank=True,
                related_name='sources',
                through='sources.Citation',
                through_fields=['source', 'content_object', 'content_type', 'object_id']
            ),
        ),
        migrations.AlterUniqueTogether(
            name='citation',
            unique_together={('source', 'content_type', 'object_id', 'position')},
        ),
        migrations.RemoveField(
            model_name='citation',
            name='old_source',
        ),
        migrations.AlterModelOptions(
            name='source',
            options={},
        ),
        migrations.RemoveField(
            model_name='source',
            name='containers',
        ),
        migrations.RemoveField(
            model_name='source',
            name='creators',
        ),
        migrations.RemoveField(
            model_name='source',
            name='db_file',
        ),
        migrations.RemoveField(
            model_name='source',
            name='db_string',
        ),
        migrations.RemoveField(
            model_name='source',
            name='location',
        ),
        migrations.DeleteModel(
            name='OldAffidavit',
        ),
        migrations.DeleteModel(
            name='OldArticle',
        ),
        migrations.DeleteModel(
            name='OldBook',
        ),
        migrations.DeleteModel(
            name='OldChapter',
        ),
        migrations.DeleteModel(
            name='OldDocument',
        ),
        migrations.DeleteModel(
            name='OldDocumentary',
        ),
        migrations.DeleteModel(
            name='OldInterview',
        ),
        migrations.DeleteModel(
            name='OldJournalEntry',
        ),
        migrations.DeleteModel(
            name='OldLetter',
        ),
        migrations.DeleteModel(
            name='OldPiece',
        ),
        migrations.DeleteModel(
            name='OldSpeech',
        ),
        migrations.DeleteModel(
            name='OldWebPage',
        ),
        migrations.RemoveField(
            model_name='source',
            name='polymorphic_ctype',
        ),
        migrations.AlterModelOptions(
            name='sourcecontainment',
            options={'ordering': ['position', 'typed_source']},
        ),
        migrations.RemoveField(
            model_name='sourcecontainment',
            name='container',
        ),
        migrations.RemoveField(
            model_name='sourcecontainment',
            name='source',
        ),
        migrations.RemoveField(
            model_name='sourceattribution',
            name='source',
        ),
        migrations.RenameModel(
            old_name='Source',
            new_name='OldSource',
        ),
        RenameModelAndBaseOperation(
            old_name='TypedSource',
            new_name='Source',
        ),
        migrations.AlterField(
            model_name='source',
            name='collection',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='source', to='sources.collection'),
        ),
        migrations.DeleteModel(
            name='OldSource',
        ),
        migrations.AlterField(
            model_name='source',
            name='collection',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='documents', to='sources.collection'),
        ),
        migrations.AlterModelOptions(
            name='sourcecontainment',
            options={'ordering': ['position', 'source']},
        ),
        migrations.RenameField(
            model_name='sourceattribution',
            old_name='typed_source',
            new_name='source',
        ),
        migrations.RenameField(
            model_name='sourcecontainment',
            old_name='typed_container',
            new_name='container',
        ),
        migrations.RenameField(
            model_name='sourcecontainment',
            old_name='typed_source',
            new_name='source',
        ),
        migrations.AlterField(
            model_name='sourcecontainment',
            name='container',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='container_containments', to='sources.source'),
        ),
        migrations.AlterField(
            model_name='sourcecontainment',
            name='source',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='source_containments', to='sources.source'),
        ),
        migrations.AlterField(
            model_name='source',
            name='attributees',
            field=models.ManyToManyField(blank=True, related_name='attributed_sources', through='sources.SourceAttribution', to='entities.Entity'),
        ),
        migrations.AddField(
            model_name='source',
            name='computations',
            field=modularhistory.fields.json_field.JSONField(blank=True, default=dict, null=True),
        ),
    ]
